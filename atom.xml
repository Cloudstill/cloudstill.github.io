<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title> 云湍小站 </title>
  
  <subtitle> 来自云上的湍流 </subtitle>
  <link href="https://gitee.com/cloudstill/cloudstill.git/atom.xml" rel="self"/>
  
  <link href="https://gitee.com/cloudstill/cloudstill.git/"/>
  <updated>2023-02-06T16:04:48.273Z</updated>
  <id>https://gitee.com/cloudstill/cloudstill.git/</id>
  
  <author>
    <name>云湍/Cloudstill</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据结构_03：链表的设计与实现</title>
    <link href="https://gitee.com/cloudstill/cloudstill.git/2023/01/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-03%EF%BC%9A%E9%93%BE%E8%A1%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/"/>
    <id>https://gitee.com/cloudstill/cloudstill.git/2023/01/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-03%EF%BC%9A%E9%93%BE%E8%A1%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</id>
    <published>2023-01-13T09:22:34.000Z</published>
    <updated>2023-02-06T16:04:48.273Z</updated>
    
    <content type="html"><![CDATA[<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p>链，是一种什么样的东西呢？现实生活中我们都见过铁链金链和银链，它们都有一个特点，是一个环节一个环节环环相扣连接在一起的。而链表，则是一种具有相似结构的数据结构。<br>在链表中，每一个环节，即链结，都需要负责实现两个功能：</p><ol><li>记录某些数值；</li><li>指向下一链结。</li></ol><p>一般而言，链表可以分为两种，一种头链结为空仅指向第二个链结，另一种头链结不为空。这里我们只介绍前面一种。</p><h3 id="定义结构体"><a href="#定义结构体" class="headerlink" title="定义结构体"></a>定义结构体</h3><p>在此之前我们已经达成了对于链结功能的共识，为了方便我们将每一个小的链结都定义成一个结构体，即：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">listnode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">int</span> element;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">listnode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在这个结构体中，我们定义了两个成员整型变量element和结构体指针变量next。其中，element负责执行第一个功能，记录某些数值，而next负责指向下一个链结。</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>网上很多教程在初始化时会提前预想可能的链结个数，本教程奉行即插即建即用原则，在初始化时仅对头链结进行进行初始化。和顺序表一样，我们可以用typedef函数将结构体指针重命名以便于后续操作，即：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">listnode</span>* <span class="title">Node</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setuphead</span><span class="params">(Node headnode)</span></span><br><span class="line">&#123;</span><br><span class="line">  headnode=<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> listnode));</span><br><span class="line">  headnode-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个代码中，我们用malloc()函数为头链结申请了一块空间，接着保证不指向其他链结。</p><h3 id="判空"><a href="#判空" class="headerlink" title="判空"></a>判空</h3><p>有时我们需要判断一个链表是否为空，根据链表的性质，我们只需要判断头链结是否指向其他链结即可，即：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">emptylist</span><span class="params">(Node headnode)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(headnode-&gt;next)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><p>和链子一样，链表的插入只需要将插入项与理论上的下一链结连接，再将原来连接这一链结的前一链结链接插入项即可。<br>这个过程描述起来有些抽象，其实很多人对链表这个概念到现在都很模糊，无妨，且看下面的流程图：<br><img src="pic.jpg"><br>在上述流程图中，我们我们表明了链结的序号，其中，序号0即为头链结。<br>至此我们已经知道了链表插入的操作流程，接下来我们就可以写程序来实现这个功能了，即：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">insertlist</span><span class="params">(Node head, <span class="type">int</span> element, <span class="type">int</span> index)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(index&lt;<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(--index)</span><br><span class="line">  &#123;</span><br><span class="line">    head=head-&gt;next;<span class="comment">//头结点指向第二个链结，此后的每个链结都指向下一个链结</span></span><br><span class="line">    <span class="keyword">if</span>(head==<span class="literal">NULL</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  Node node=<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> listnode));<span class="comment">//新建一个链结并为其申请内存</span></span><br><span class="line">  <span class="keyword">if</span>(node==<span class="literal">NULL</span>)<span class="comment">//判断申请内存是否失败，失败返回0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  node-&gt;element=element;</span><br><span class="line">  node-&gt;next=head-&gt;next;</span><br><span class="line">  head-&gt;next=node;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>与插入相似的，从链表中删除一个元素只需要断开该元素与指向这个元素的链结之间的联系，并且将指向该元素的链结指向该元素指向的链结。<br>乍一听可能有些抽象，这里我们同样用一个流程图来表述：<br><img src="pic1.jpg"><br>通过该流程图，我们可以很好地理解删除的全过程，即：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">deletelist</span><span class="params">(Node head, <span class="type">int</span> index)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(index&lt;<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(--index)</span><br><span class="line">  &#123;</span><br><span class="line">    head=head-&gt;next;</span><br><span class="line">    <span class="keyword">if</span>(head==<span class="literal">NULL</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  Node tmp=head-&gt;next;</span><br><span class="line">  head-&gt;next=head-&gt;next-&gt;next;</span><br><span class="line">  <span class="built_in">free</span>(tmp);</span><br><span class="line">  tmp=<span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查找长度"><a href="#查找长度" class="headerlink" title="查找长度"></a>查找长度</h3><p>和顺序表不一样的是，我们在构建链表结构体时并没有引入一个变量来表示链表的长度，但是根据链表的定义，我们可以很容易地知道，一个链表的最后一个链结并不指向其他链结，所以我们只需要从头开始遍历整个链表，找到那个特殊的链结即可，即：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sizelist</span><span class="params">(Node head)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span>(head)</span><br><span class="line">  &#123;</span><br><span class="line">    head=head-&gt;next;</span><br><span class="line">    i++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h3><p>在查找元素这个操作中，我们可以很容易采取遍历查找的方式来实现，即：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">findlist</span><span class="params">(Node head, <span class="type">int</span> element)</span></span><br><span class="line">&#123;</span><br><span class="line">  head=head-&gt;next;</span><br><span class="line">  <span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span>(head)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(head-&gt;element==element)</span><br><span class="line">      <span class="keyword">return</span> i;</span><br><span class="line">    head=head-&gt;next;</span><br><span class="line">    i++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查找索引"><a href="#查找索引" class="headerlink" title="查找索引"></a>查找索引</h3><p>和顺序表不一样的是，我们在定义链表结构体时并没有引入索引这一变量，这也就导致了我们在查找索引时必须要从表头开始查找，因而在执行查找索引这一操作上链表的效率低于顺序表。<br>我们可以很容易地用遍历的方法来实现查找索引的功能，即：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>* <span class="title function_">getlist</span><span class="params">(Node head, <span class="type">int</span> index)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(index&lt;<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    head=head-&gt;next;</span><br><span class="line">    <span class="keyword">if</span>(head==<span class="literal">NULL</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(--index);</span><br><span class="line">  <span class="keyword">return</span> &amp;head-&gt;element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h3><p>当我们想要实现打印链表功能时，我们只需要从头开始边遍历整个链表边打印元素直至链结不再指向下一链结为止，即：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">printlist</span><span class="params">(Node head)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">while</span>(head-&gt;next)</span><br><span class="line">  &#123;</span><br><span class="line">    head=head-&gt;next;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,head-&gt;element);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="顺序表与链表的区别"><a href="#顺序表与链表的区别" class="headerlink" title="顺序表与链表的区别"></a>顺序表与链表的区别</h2><p>如果我们深入思考了上一节中讲的顺序表，我们会发现它在一定程度上和数组十分相似，并且它在存储时也是一段连续的内存，而本节所讲的链表是不连续存储的。<br>在我们日常生活中，有时会遇到顺序表和链表如何抉择的问题。一个数据结构往往要实现增删查改四个功能。其实，当我们仔细比较其优缺点后，我们很容易发现顺序表在查改方面存在优势，而链表在增删方面存在优势。这也就意味着，当我们实际使用时，可以根据所用的次数来决定如何选择。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>链表作为一个经典的数据结构，在学习上会存在着一定的难度。但是，有了前面顺序表的基础，再加上认真钻研，实际理解起来还是很简单的。<br>值得注意的是，数据结构并不是一门基于某某语言的课程，实际上，我们可以用任何语言来写数据结构。同时，即便是同种语言下的数据结构，在实现起来也会存在代码的不同，本教程仅仅提供一种解决方案。<br>我们在学习时，一定不要局限于形式上的不同，关键要领略其核心思想，勤于思考才能事半功倍。</p><h3 id="附代码"><a href="#附代码" class="headerlink" title="附代码"></a>附代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">listnode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">int</span> element;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">listnode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">listnode</span>* <span class="title">Node</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setuphead</span><span class="params">(Node headnode)</span></span><br><span class="line">&#123;</span><br><span class="line">  headnode=<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> listnode));</span><br><span class="line">  headnode-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">emptylist</span><span class="params">(Node headnode)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(headnode-&gt;next)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">insertlist</span><span class="params">(Node head, <span class="type">int</span> element, <span class="type">int</span> index)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(index&lt;<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(--index)</span><br><span class="line">  &#123;</span><br><span class="line">    head=head-&gt;next;</span><br><span class="line">    <span class="keyword">if</span>(head==<span class="literal">NULL</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  Node node=<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> listnode));</span><br><span class="line">  <span class="keyword">if</span>(node==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  node-&gt;element=element;</span><br><span class="line">  node-&gt;next=head-&gt;next;</span><br><span class="line">  head-&gt;next=node;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">deletelist</span><span class="params">(Node head, <span class="type">int</span> index)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(index&lt;<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(--index)</span><br><span class="line">  &#123;</span><br><span class="line">    head=head-&gt;next;</span><br><span class="line">    <span class="keyword">if</span>(head==<span class="literal">NULL</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  Node tmp=head-&gt;next;</span><br><span class="line">  head-&gt;next=head-&gt;next-&gt;next;</span><br><span class="line">  <span class="built_in">free</span>(tmp);</span><br><span class="line">  tmp=<span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sizelist</span><span class="params">(Node head)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span>(head)</span><br><span class="line">  &#123;</span><br><span class="line">    head=head-&gt;next;</span><br><span class="line">    i++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">findlist</span><span class="params">(Node head, <span class="type">int</span> element)</span></span><br><span class="line">&#123;</span><br><span class="line">  head=head-&gt;next;</span><br><span class="line">  <span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span>(head)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(head-&gt;element==element)</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">    head=head-&gt;next;</span><br><span class="line">    i++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>* <span class="title function_">getlist</span><span class="params">(Node head, <span class="type">int</span> index)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(index&lt;<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    head=head-&gt;next;</span><br><span class="line">    <span class="keyword">if</span>(head==<span class="literal">NULL</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(--index);</span><br><span class="line">  <span class="keyword">return</span> &amp;head-&gt;element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printlist</span><span class="params">(Node head)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">while</span>(head-&gt;next)</span><br><span class="line">  &#123;</span><br><span class="line">    head=head-&gt;next;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,head-&gt;element);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>本教程参考资料如下：</p><ul><li>B站视频：<br><a class="link" href="https://www.bilibili.com/video/BV13W4y127Ey/?p=8&share_source=copy_web&vd_source=53065aea9ac10aafe4148aca8749443c">《数据结构与算法 已完结（CLion 2022 最新版）4K蓝光画质+杜比音效 全程高能》<i class="fas fa-external-link-alt"></i></a><br><a class="link" href="https://www.bilibili.com/video/BV1Fv4y1f7T1/?p=5&share_source=copy_web&vd_source=53065aea9ac10aafe4148aca8749443c">《【强烈推荐】深入浅出数据结构 - 顶尖程序员图文讲解 - UP主翻译校对 (已完结)》<i class="fas fa-external-link-alt"></i></a></li><li>CSDN文章：<br><a class="link" href="http://t.csdn.cn/xwPpA">《c语言链表详解（超详细）》<i class="fas fa-external-link-alt"></i></a><br><a class="link" href="http://t.csdn.cn/KuU8c">《关于链表，看这一篇就够了！（新手入门）》<i class="fas fa-external-link-alt"></i></a><br><a class="link" href="http://t.csdn.cn/80UTU">《链表(开辟和不开辟新空间)》<i class="fas fa-external-link-alt"></i></a>。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;链表&quot;&gt;&lt;a href=&quot;#链表&quot; class=&quot;headerlink&quot; title=&quot;链表&quot;&gt;&lt;/a&gt;链表&lt;/h2&gt;&lt;p&gt;链，是一种什么样的东西呢？现实生活中我们都见过铁链金链和银链，它们都有一个特点，是一个环节一个环节环环相扣连接在一起的。而链表，则是一种具有</summary>
      
    
    
    
    <category term="数据结构" scheme="https://gitee.com/cloudstill/cloudstill.git/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="C语言" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="教程" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="数据结构" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>数据结构_02：顺序表的设计与实现</title>
    <link href="https://gitee.com/cloudstill/cloudstill.git/2023/01/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-02%EF%BC%9A%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/"/>
    <id>https://gitee.com/cloudstill/cloudstill.git/2023/01/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-02%EF%BC%9A%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</id>
    <published>2023-01-10T15:21:20.000Z</published>
    <updated>2023-01-29T17:31:07.841Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数组和表的区别"><a href="#数组和表的区别" class="headerlink" title="数组和表的区别"></a>数组和表的区别</h2><p>在开启本教程学习之前，相信大家已经有了一定语言基础，对于数组，大家一定十分熟悉。我们在使用数组时，或多或少会遇到以下几个问题：</p><ol><li>必须在一开始就声明数组的长度；</li><li>无法随时随用地对数组进行扩容，这就导致了一开始声明的数组的长度必须足够大；</li><li>可能会存在未使用的数组，这对内存是一种浪费。</li></ol><p>而表，就是一种可以解决这些问题的数据结构。<br>关于数组和表，更多的区别需要可能会涉及一些更加深层的知识，这里不做赘述，欢迎自己探知。</p><h2 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h2><p>按照惯例，我们一般需要对顺序表进行一定的介绍：顺序表是用一段物理地址连续的存储单元依次存储数据元素的线性结构，一般情况下采用数组存储。在数组上完成数据的增删查改。<br>为了方便理解，我们可以简单地认为他是一种可以动态变化的连续存储的数组。</p><h3 id="定义结构体"><a href="#定义结构体" class="headerlink" title="定义结构体"></a>定义结构体</h3><p>顺序表的实现有很多方式，其中，我们采取结构体的方式。<br>首先我们需要定义一个结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">int</span>* <span class="built_in">array</span>;</span><br><span class="line">  <span class="type">int</span> capacity;</span><br><span class="line">  <span class="type">int</span> size;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在这段代码中，我们定义了一个叫list的结构体，它包含了三个成员，整型指针变量array，整型变量capacity和整型变量size。<br>和它们的名字一样，array表示顺序表所占的内存空间，capacity表示顺序表的理论最大容量，size表示顺序表中已经填满的容量，即实际长度。</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>当我们定义完结构体后，我们还没有真正创建一个顺序表，即便我们在main函数中创建了一个结构体变量，它也不能真正算得上一个顺序表。<br>一个顺序表的实现必须要对其进行初始化，为了便于多次使用，我们采取自定义一个初始化函数的方式实现。<br>在此之前，为了便于后续操作，我们可以使用typedef函数将结构体指针<code>struct list*</code>重命名为<code>arraylist</code>，即：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">list</span>* <span class="title">arraylist</span>;</span></span><br></pre></td></tr></table></figure><p>此后涉及<code>struct list*</code>的内容我们一律用<code>arraylist</code>代替，请根据需求自行代换。<br>根据我们此前定义的结构体的三个成员内存array，容量capacity，长度size，我们可以设想到初始化需要进行的操作。<br>我们都知道计算机在存储数据时需要用到内存空间，所以我们在初始化时，需要使用malloc()函数申请一块内存空间，使用此函数前我们需要引入新的头文件&lt;stdlib.h&gt;，即：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br></pre></td></tr></table></figure><p>接着，我们需要用变量表示顺序表初始的最大容量和实际长度。<br>综上，初始化一个顺序表需要实现以下三个功能：</p><ol><li>向计算机申请一块内存空间；</li><li>表示顺序表初始最大容量；</li><li>表示顺序表初始实际长度，即0；</li></ol><p>实现这三个功能并不难，即：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">setuplist</span><span class="params">(arraylist <span class="built_in">list</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">list</span>-&gt;capacity=<span class="number">1</span>;<span class="comment">//此处初始化顺序表容量为1，实际可更改</span></span><br><span class="line">  <span class="built_in">list</span>-&gt;<span class="built_in">array</span>=<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*<span class="built_in">list</span>-&gt;capacity);</span><br><span class="line">  <span class="built_in">list</span>-&gt;size=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察上述代码块，有几点值得我们注意：</p><ol><li>在学习函数章节时，我们已经知道了函数传值和传地址的区别，此处由于我们需要对顺序表地址进行操作，故需要用到结构体指针；</li><li>表示结构体指针的成员需要用到-&gt;符号，或者也可以用(*指针名).成员名表示；</li><li>sizeof()函数会根据括号内的数据类型换算成对应的内存大小；</li></ol><p>当我们深入了解malloc()函数后，我们会知道有时malloc()函数也会申请内存失败，此时它会返回NULL，同时申请失败也就意味着初始化失败，我们可以采取一种方式来表示初始化的成功与否。<br>我们可以用布尔型返回true和false来表示初始化的结果，但是我们都知道true&#x3D;1，false&#x3D;0，又因为C语言中可能存在没有布尔型的情况，此处我们仅仅展示一个在部分C语言标准下存在的代码块，后续涉及判断内容我们一律采用int型，代码块即：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line">...</span><br><span class="line"><span class="type">_Bool</span> test_1=<span class="literal">true</span>;</span><br><span class="line"><span class="type">bool</span> test_2=<span class="literal">false</span>;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>对于增加判断申请内存失败与否的初始化函数，即：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">setuplist</span><span class="params">(arraylist <span class="built_in">list</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">list</span>-&gt;capacity=<span class="number">1</span>;</span><br><span class="line">  <span class="built_in">list</span>-&gt;<span class="built_in">array</span>=<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*<span class="built_in">list</span>-&gt;capacity);</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">list</span>-&gt;<span class="built_in">array</span>==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">list</span>-&gt;size=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，我们已经实现了顺序表的初始化功能。</p><h3 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h3><p>当我们初始化一个顺序表后，有时我们会面临最大容量不足的情况，当然我们一开始初始化的可以很容易的保证最大容量足够第一次使用，可是当我们后续使用时，有时要对其进行扩容。<br>在C语言中本身提供了realloc()函数重新申请一块内存，和malloc()一样，它也是包含于&lt;stdlib.h&gt;头文件中的，扩容的操作极其简单，即：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">extendlist</span><span class="params">(arraylist <span class="built_in">list</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> newcapacity=<span class="built_in">list</span>-&gt;capacity*<span class="number">2</span>;<span class="comment">//内存扩展两倍</span></span><br><span class="line">  <span class="type">int</span>* newarray=<span class="built_in">realloc</span>(<span class="built_in">list</span>-&gt;<span class="built_in">array</span>, <span class="keyword">sizeof</span>(<span class="type">int</span>)*newcapacity);</span><br><span class="line">  <span class="keyword">if</span>(newarray==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">list</span>-&gt;<span class="built_in">array</span>=newarray;</span><br><span class="line">  <span class="built_in">list</span>-&gt;capacity=newcapacity;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><p>一个顺序表被创建出来后，其中并没有元素，这时我们可以对其进行插入。和插入数组一样，我们顺序表的插入也需要三个要素：</p><ol><li>被插入的顺序表；</li><li>插入的数字；</li><li>插入的位置。</li></ol><p>基于此，我们很容易就可以设计出一个插入顺序表的函数，在我们正式开始进行写代码前，我们可以很容易的预见一些插入过程中可能会发生的问题：</p><ol><li>插入的位置在可插入的位置之外；</li><li>顺序表容积已满，需要扩容；</li><li>如何选择插入的方法。</li></ol><p>关于第一个问题，我们一般认为顺序表从的位置从1开始，那么当我们插入的位置小于1或很大时，这个插入是不可取的；关于第二个问题，我们只需要在插入过程中引入if判断是否需要扩容即可；关于第三个问题，我们可以很容易想到，我们只需要将顺序表的元素从尾部开始依次向后移动一位直到空出需要插入的位置，再将需要插入的元素插入需要插入的位置即可。<br>综上，我们可以很容易写出代码，即：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">insertlist</span><span class="params">(arraylist <span class="built_in">list</span>, <span class="type">int</span> element, <span class="type">int</span> index)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(index&lt;<span class="number">1</span>||index&gt;<span class="built_in">list</span>-&gt;size+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">list</span>-&gt;size==<span class="built_in">list</span>-&gt;capacity)</span><br><span class="line">    extendlist(arraylist <span class="built_in">list</span>);</span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="built_in">list</span>-&gt;size; i&gt;index<span class="number">-1</span>; i--)</span><br><span class="line">    <span class="built_in">list</span>-&gt;<span class="built_in">array</span>[i]=<span class="built_in">list</span>-&gt;<span class="built_in">array</span>[i<span class="number">-1</span>];</span><br><span class="line">  <span class="built_in">list</span>-&gt;<span class="built_in">array</span>[index<span class="number">-1</span>]=element;</span><br><span class="line">  <span class="built_in">list</span>-&gt;size++;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>当我们学会了插入后，再学习删除是非常简单的，我们只需要根据位置信息，就可以将顺序表中的某个元素删除，值得注意是，输入的位置信息也需要在合法的范围内，代码即：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">deletelist</span><span class="params">(arraylist <span class="built_in">list</span>, <span class="type">int</span> index)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(index&lt;<span class="number">1</span>||index&gt;<span class="built_in">list</span>-&gt;size)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line">  <span class="keyword">for</span>(i=index<span class="number">-1</span>; i&lt;<span class="built_in">list</span>-&gt;size; i++)</span><br><span class="line">    <span class="built_in">list</span>-&gt;<span class="built_in">array</span>[i]=<span class="built_in">list</span>-&gt;<span class="built_in">array</span>[i+<span class="number">1</span>];</span><br><span class="line">  <span class="built_in">list</span>-&gt;size--;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查找长度"><a href="#查找长度" class="headerlink" title="查找长度"></a>查找长度</h3><p>查找长度相当简单，我们只需要向主程序返回size值即可，即：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sizelist</span><span class="params">(<span class="built_in">array</span> <span class="built_in">list</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">list</span>-&gt;size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h3><p>查找元素也同样简单，我们可以选择多种查找方式，这里我们采用简单的遍历查找，即：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">findlist</span><span class="params">(arraylist <span class="built_in">list</span>, <span class="type">int</span> element)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="built_in">list</span>-&gt;size; i++)</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">list</span>-&gt;<span class="built_in">array</span>[i]==element)</span><br><span class="line">      <span class="keyword">return</span> i+<span class="number">1</span>;<span class="comment">//数组从0开始，顺序表从1开始，故i+1</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查找索引"><a href="#查找索引" class="headerlink" title="查找索引"></a>查找索引</h3><p>查找索引即查找某个位置上对应元素的值，有了上述模块的经验，我们很容易设计出一个功能齐全的函数，即：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>* <span class="title function_">getlist</span><span class="params">(arraylist <span class="built_in">list</span>, <span class="type">int</span> index)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(index&lt;<span class="number">1</span>||index&gt;<span class="built_in">list</span>-&gt;size)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">return</span> &amp;<span class="built_in">list</span>-&gt;<span class="built_in">array</span>[index<span class="number">-1</span>];<span class="comment">//注意数组索引和顺序表索引的区别</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h3><p>打印顺序表索引元素的函数也同样简单，即：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">printlist</span><span class="params">(arraylist <span class="built_in">list</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="built_in">list</span>-&gt;size; i++)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,<span class="built_in">list</span>-&gt;<span class="built_in">array</span>[i]);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="销毁"><a href="#销毁" class="headerlink" title="销毁"></a>销毁</h3><p>当我们使用完顺序表后，有时候需要销毁它释放内存，此时我们可以用free()函数来进行操作，free()函数必须与malloc()函数配套使用，即：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">destorylist</span><span class="params">(arraylist <span class="built_in">list</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">list</span>-&gt;<span class="built_in">array</span>==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">free</span>(<span class="built_in">list</span>-&gt;<span class="built_in">array</span>);</span><br><span class="line">  <span class="built_in">list</span>-&gt;<span class="built_in">array</span>=<span class="literal">NULL</span>;</span><br><span class="line">  <span class="built_in">list</span>-capacity=<span class="number">0</span>;</span><br><span class="line">  <span class="built_in">list</span>-&gt;size=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>顺序表作为数据结构的第一节，并不算难，我们关键是要从中领会思想，学习一些函数的用法，为接下来链表的学习打好基础。</p><h3 id="附代码"><a href="#附代码" class="headerlink" title="附代码"></a>附代码</h3><p>全代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">int</span>* <span class="built_in">array</span>;</span><br><span class="line">  <span class="type">int</span> capacity;</span><br><span class="line">  <span class="type">int</span> size;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">list</span>* <span class="title">arraylist</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">setuplist</span><span class="params">(arraylist <span class="built_in">list</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">list</span>-&gt;capacity=<span class="number">1</span>;</span><br><span class="line">  <span class="built_in">list</span>-&gt;<span class="built_in">array</span>=<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*<span class="built_in">list</span>-&gt;capacity);</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">list</span>-&gt;<span class="built_in">array</span>==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">list</span>-&gt;size=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">extendlist</span><span class="params">(arraylist <span class="built_in">list</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> newcapacity=<span class="built_in">list</span>-&gt;capacity*<span class="number">2</span>;<span class="comment">//内存扩展两倍</span></span><br><span class="line">  <span class="type">int</span>* newarray=<span class="built_in">realloc</span>(<span class="built_in">list</span>-&gt;<span class="built_in">array</span>, <span class="keyword">sizeof</span>(<span class="type">int</span>)*newcapacity);</span><br><span class="line">  <span class="keyword">if</span>(newarray==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">list</span>-&gt;<span class="built_in">array</span>=newarray;</span><br><span class="line">  <span class="built_in">list</span>-&gt;capacity=newcapacity;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">insertlist</span><span class="params">(arraylist <span class="built_in">list</span>, <span class="type">int</span> element, <span class="type">int</span> index)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(index&lt;<span class="number">1</span>||index&gt;<span class="built_in">list</span>-&gt;size+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">list</span>-&gt;size==<span class="built_in">list</span>-&gt;capacity)</span><br><span class="line">    extendlist(arraylist);</span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="built_in">list</span>-&gt;size;i&gt;index<span class="number">-1</span>;--i)</span><br><span class="line">    <span class="built_in">list</span>-&gt;<span class="built_in">array</span>[i]=<span class="built_in">list</span>-&gt;<span class="built_in">array</span>[i<span class="number">-1</span>];</span><br><span class="line">  <span class="built_in">list</span>-&gt;<span class="built_in">array</span>[index<span class="number">-1</span>]=element;</span><br><span class="line">  <span class="built_in">list</span>-&gt;size++;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">deletelist</span><span class="params">(arraylist <span class="built_in">list</span>, <span class="type">int</span> index)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(index&lt;<span class="number">1</span>||index&gt;<span class="built_in">list</span>-&gt;size)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line">  <span class="keyword">for</span>(i=index<span class="number">-1</span>; i&lt;<span class="built_in">list</span>-&gt;size; i++)</span><br><span class="line">    <span class="built_in">list</span>-&gt;<span class="built_in">array</span>[i]=<span class="built_in">list</span>-&gt;<span class="built_in">array</span>[i+<span class="number">1</span>];</span><br><span class="line">  <span class="built_in">list</span>-&gt;size--;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sizelist</span><span class="params">(arraylist <span class="built_in">list</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">list</span>-&gt;size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">findlist</span><span class="params">(arraylist <span class="built_in">list</span>, <span class="type">int</span> element)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="built_in">list</span>-&gt;size; i++)</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">list</span>-&gt;<span class="built_in">array</span>[i]==element)</span><br><span class="line">      <span class="keyword">return</span> i+<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>* <span class="title function_">getlist</span><span class="params">(arraylist <span class="built_in">list</span>, <span class="type">int</span> index)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(index&lt;<span class="number">1</span>||index&gt;<span class="built_in">list</span>-&gt;size)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">return</span> &amp;<span class="built_in">list</span>-&gt;<span class="built_in">array</span>[index<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printlist</span><span class="params">(arraylist <span class="built_in">list</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="built_in">list</span>-&gt;size; i++)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,<span class="built_in">list</span>-&gt;<span class="built_in">array</span>[i]);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">destorylist</span><span class="params">(arraylist <span class="built_in">list</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">list</span>-&gt;<span class="built_in">array</span>==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">free</span>(<span class="built_in">list</span>-&gt;<span class="built_in">array</span>);</span><br><span class="line">  <span class="built_in">list</span>-&gt;<span class="built_in">array</span>=<span class="literal">NULL</span>;</span><br><span class="line">  <span class="built_in">list</span>-capacity=<span class="number">0</span>;</span><br><span class="line">  <span class="built_in">list</span>-&gt;size=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数组和表的区别&quot;&gt;&lt;a href=&quot;#数组和表的区别&quot; class=&quot;headerlink&quot; title=&quot;数组和表的区别&quot;&gt;&lt;/a&gt;数组和表的区别&lt;/h2&gt;&lt;p&gt;在开启本教程学习之前，相信大家已经有了一定语言基础，对于数组，大家一定十分熟悉。我们在使用数组时，或</summary>
      
    
    
    
    <category term="数据结构" scheme="https://gitee.com/cloudstill/cloudstill.git/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="C语言" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="教程" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="数据结构" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>备战蓝桥杯_算法_01：递归</title>
    <link href="https://gitee.com/cloudstill/cloudstill.git/2022/12/16/%E5%A4%87%E6%88%98%E8%93%9D%E6%A1%A5%E6%9D%AF-%E7%AE%97%E6%B3%95-01%EF%BC%9A%E9%80%92%E5%BD%92/"/>
    <id>https://gitee.com/cloudstill/cloudstill.git/2022/12/16/%E5%A4%87%E6%88%98%E8%93%9D%E6%A1%A5%E6%9D%AF-%E7%AE%97%E6%B3%95-01%EF%BC%9A%E9%80%92%E5%BD%92/</id>
    <published>2022-12-16T11:22:02.000Z</published>
    <updated>2023-01-29T17:51:03.428Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>已经数不清这是开的第几个坑了，蓝桥杯虽然含金量不高，但是对于我这样的初学者而言确是一次很好的历练机会，为了记录我备赛的过程，特此开了这个坑。<br>声明：本系列源于CSDN博主<a class="link" href="https://blog.csdn.net/GD_ONE?type=blog">Androids_lost_Sheep<i class="fas fa-external-link-alt"></i></a>的博文<a class="link" href="https://blog.csdn.net/GD_ONE/article/details/104061907?spm=1001.2014.3001.5502">《蓝桥杯知识点汇总：基础知识和常用算法》<i class="fas fa-external-link-alt"></i></a>，博主所采用的编程语言为Java，本系列将采用C语言作为编程语言。</p><h2 id="什么是递归"><a href="#什么是递归" class="headerlink" title="什么是递归"></a>什么是递归</h2><p>递归的含义很好理解，就是一个函数调用自身，难就难在如何确定一个题目的递归式，这就需要多刷题了。<br>一个完整的递归函数包含两个部分:</p><ol><li>递归式</li><li>递归出口</li></ol><p>以斐波那契数列为例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">f</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">1</span> || n == <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// 递归出口</span></span><br><span class="line"><span class="keyword">return</span> f(n<span class="number">-1</span>) + f(n<span class="number">-2</span>); <span class="comment">// 递归式</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>递归式用来递归计算我们想要得到的值， 递归出口用来结束递归。<br>如果没有递归出口，那么就会一直递归下去，就造成了死循环。<br>那么什么题会用到递归呢？<br>子问题和原问题求解方式完全相同的，可以用递归。</p><h3 id="一个递归的例子"><a href="#一个递归的例子" class="headerlink" title="一个递归的例子"></a>一个递归的例子</h3><h4 id="题目：计算n阶行列式"><a href="#题目：计算n阶行列式" class="headerlink" title="题目：计算n阶行列式"></a>题目：计算n阶行列式</h4><blockquote><p>给定一个N×N的矩阵A，求|A|。<br>输入格式：<br>第一行一个正整数N。 接下来N行，每行N个整数，第i行第j个数字表示A[i][j]。<br>输出格式：<br>一行，输出|A|。  </p></blockquote><h4 id="思路：寻找递归"><a href="#思路：寻找递归" class="headerlink" title="思路：寻找递归"></a>思路：寻找递归</h4><p>在通过递归解决问题时，我们往往只需要关注n到n-1步的变化规律，然后将其不断重复到跳出条件即可。<br>对于本题而言，计算行列式的一个通法是拉普拉斯展开，故我们要考虑n阶行列式到n-1阶行列式的变化过程。</p><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 100</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">DET</span><span class="params">(<span class="type">int</span> num_1[MAX][MAX], <span class="type">int</span> n)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">Minor</span><span class="params">(<span class="type">int</span> num_1[MAX][MAX], <span class="type">int</span> i, <span class="type">int</span> n)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> num_1[MAX][MAX];</span><br><span class="line"><span class="type">int</span> i,j,n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num_1[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,DET(num_1,n));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">DET</span><span class="params">(<span class="type">int</span> num_1[MAX][MAX],<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i,M,sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> num_1[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(n&gt;<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">M=Minor(num_1,i,n);</span><br><span class="line">sum=sum+<span class="built_in">pow</span>(<span class="number">-1</span>,i+<span class="number">2</span>)*num_1[<span class="number">0</span>][i]*M;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">Minor</span><span class="params">(<span class="type">int</span> num_1[MAX][MAX],<span class="type">int</span> i,<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> j,k,result;</span><br><span class="line"><span class="type">int</span> num_2[MAX][MAX];</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n<span class="number">-1</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;n<span class="number">-1</span>;k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(k&lt;i)</span><br><span class="line">&#123;</span><br><span class="line">num_2[j][k]=num_1[j+<span class="number">1</span>][k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(k&gt;=i)</span><br><span class="line">&#123;</span><br><span class="line">num_2[j][k]=num_1[j+<span class="number">1</span>][k+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> DET(num_2,n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="递归练习"><a href="#递归练习" class="headerlink" title="递归练习"></a>递归练习</h2><h3 id="递归实现指数型枚举"><a href="#递归实现指数型枚举" class="headerlink" title="递归实现指数型枚举"></a>递归实现指数型枚举</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><blockquote><p>从 1∼n 这 n 个整数中随机选取任意多个，输出所有可能的选择方案。<br>输入格式<br>输入一个整数 n。<br>输出格式<br>每行输出一种方案。<br>同一行内的数必须升序排列，相邻两个数用恰好 1 个空格隔开。<br>对于没有选任何数的方案，输出空行。<br>本题有自定义校验器（SPJ），各行（不同方案）之间的顺序任意。<br>数据范围<br>1≤n≤15<br>输入样例：<br>3<br>输出样例：<br>3<br>2<br>2 3<br>1<br>1 3<br>1 2<br>1 2 3  </p></blockquote><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;已经数不清这是开的第几个坑了，蓝桥杯虽然含金量不高，但是对于我这样的初学者而言确是一次很好的历练机会，为了记录我备赛的过程，特此开了这个坑。</summary>
      
    
    
    
    <category term="蓝桥杯" scheme="https://gitee.com/cloudstill/cloudstill.git/categories/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
    
    <category term="C语言" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="教程" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="练习" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/%E7%BB%83%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>评教教程</title>
    <link href="https://gitee.com/cloudstill/cloudstill.git/2022/12/14/%E8%AF%84%E6%95%99%E6%95%99%E7%A8%8B/"/>
    <id>https://gitee.com/cloudstill/cloudstill.git/2022/12/14/%E8%AF%84%E6%95%99%E6%95%99%E7%A8%8B/</id>
    <published>2022-12-14T04:23:43.000Z</published>
    <updated>2023-01-29T17:30:03.761Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Edge评教流程"><a href="#Edge评教流程" class="headerlink" title="Edge评教流程"></a>Edge评教流程</h2><p>首先打开网址<a class="link" href="https://webvpn.wbu.edu.cn/">webvpn.wbu.edu.cn<i class="fas fa-external-link-alt"></i></a>，然后不要着急输入账密，按照以下流程操作：</p><ol><li>右上角打开设置,点击默认浏览器：<br><img src="1.png"><br>如果上述没有成功，你也可以这样操作：<br><img src="1.5.png"></li><li>开启允许打开IE兼容模式后，我们还要点击右上角设置把IE兼容模式打开：<br><img src="2.jpg"><br>如果你在第一步中选择了第二种方式，此时你可以：<br><img src="2.5.png"></li><li>完成了上述步骤后就可以输入密码了，后面的步骤非常简单<br><img src="3.png"><br><img src="4.png"><br><img src="5.png"></li></ol><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>评教时不可以全打一样的分，也就是说最高打93分。</li><li>直接提交后可能会发现还是显示的0分，但是再进去就会发现已经有分了。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Edge评教流程&quot;&gt;&lt;a href=&quot;#Edge评教流程&quot; class=&quot;headerlink&quot; title=&quot;Edge评教流程&quot;&gt;&lt;/a&gt;Edge评教流程&lt;/h2&gt;&lt;p&gt;首先打开网址&lt;a class=&quot;link&quot; href=&quot;https://webvpn.wbu</summary>
      
    
    
    
    <category term="教程" scheme="https://gitee.com/cloudstill/cloudstill.git/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="教程" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>C语言教程_06：判断语句二三事</title>
    <link href="https://gitee.com/cloudstill/cloudstill.git/2022/12/12/C%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B-06%EF%BC%9A%E5%88%A4%E6%96%AD%E8%AF%AD%E5%8F%A5%E4%BA%8C%E4%B8%89%E4%BA%8B/"/>
    <id>https://gitee.com/cloudstill/cloudstill.git/2022/12/12/C%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B-06%EF%BC%9A%E5%88%A4%E6%96%AD%E8%AF%AD%E5%8F%A5%E4%BA%8C%E4%B8%89%E4%BA%8B/</id>
    <published>2022-12-12T04:09:49.000Z</published>
    <updated>2023-01-29T17:18:00.862Z</updated>
    
    <content type="html"><![CDATA[<h2 id="不为谁而作的歌"><a href="#不为谁而作的歌" class="headerlink" title="不为谁而作的歌"></a>不为谁而作的歌</h2><p>当我写下这段文字时。距离上一次更新本教程已经过去了快两个月。<br>两个月的时间，我的心态也发生了很大的变化，再一次更新，更多的不再是为了谁谁。</p><h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><p>if相信大家都不陌生，在英文中它有着“如果”的意思，它引导的条件状语从句可以翻译为“如果……就……”，而在C语言中，它也有着相同的用法，且看下面的例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(......)</span><br><span class="line">&#123;</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>套用英语中的逻辑来理解这个例子，把它翻译成中文就是“如果小括号里面的内容成立，那么花括号里面的内容也成立”。<br>小括号里面可以填什么呢？数字，变量，表达式，关系式都可以。<br>对于数字和变量，在计算机中，无论它们的值是多少，都只有0和非0的区别，非0又可以理解为1。我们都知道在计算机中0表示假，1表示真。即小括号里的数字和变量如果为0，语句不成立，为1（非0）则成立。<br>对于表达式，程序会先将其进行运算之后，再对其数值进行如对数字和变量相同的操作。<br>对于关系式，它们同样遵循01原则，当关系式成立时它们相当于1，当关系式不成立时它们相当于0。<br>说完小括号我们再来说说花括号，花括号里填写的是函数语句，函数语句的成立意味着执行，这也就是说，一旦小括号里的值为1，那么就会执行花括号里的内容。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;不为谁而作的歌&quot;&gt;&lt;a href=&quot;#不为谁而作的歌&quot; class=&quot;headerlink&quot; title=&quot;不为谁而作的歌&quot;&gt;&lt;/a&gt;不为谁而作的歌&lt;/h2&gt;&lt;p&gt;当我写下这段文字时。距离上一次更新本教程已经过去了快两个月。&lt;br&gt;两个月的时间，我的心态也发生了很</summary>
      
    
    
    
    <category term="C语言教程" scheme="https://gitee.com/cloudstill/cloudstill.git/categories/C%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="C语言" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="教程" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>数据结构_01：什么是数据结构</title>
    <link href="https://gitee.com/cloudstill/cloudstill.git/2022/12/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84_01%EF%BC%9A%E4%BB%80%E4%B9%88%E6%98%AF%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>https://gitee.com/cloudstill/cloudstill.git/2022/12/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84_01%EF%BC%9A%E4%BB%80%E4%B9%88%E6%98%AF%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id>
    <published>2022-12-12T03:58:19.000Z</published>
    <updated>2023-02-06T16:09:29.438Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是数据结构"><a href="#什么是数据结构" class="headerlink" title="什么是数据结构"></a>什么是数据结构</h2><p>一般来说，用计算机解决一个具体问题时，大致需要经过下列几个步骤：首先要从具体问题抽象出一个适当的数学模型，然后设计一个解此数学模型的算法，最后编出程序，进行测试、调整直至得到最终解答。寻求数学模型的实质是分析问题，从中提取操作的对象，并找出这些操作对象之间含有的关系，然后用数学的语言加以描述。例如，求解梁架结构中应力的数学模型为线性方程组；预报人口增长情况的数学模型为微分方程。然而，更多的非数值计算问题无法用数学方程加以描述。<br>在生活中随处可见这样的例子，如图书馆数目检索系统自动化问题，计算机和人对弈问题，多叉路口交通灯的管理问题等等。在这三个例子中，我们描述问题的数学模型是称为“表”“树“和”图“的数据结构而非一个简单的数学方程。<br>因此，简单来说，数据结构是一门研究非数值计算的程序设计问题中计算机的操作对象以及它们之间的关系和操作等的学科。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li><a href="./%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-02%EF%BC%9A%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0.md">顺序表的设计与实现</a></li><li></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是数据结构&quot;&gt;&lt;a href=&quot;#什么是数据结构&quot; class=&quot;headerlink&quot; title=&quot;什么是数据结构&quot;&gt;&lt;/a&gt;什么是数据结构&lt;/h2&gt;&lt;p&gt;一般来说，用计算机解决一个具体问题时，大致需要经过下列几个步骤：首先要从具体问题抽象出一个适当的数学</summary>
      
    
    
    
    <category term="数据结构" scheme="https://gitee.com/cloudstill/cloudstill.git/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="C语言" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="教程" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="数据结构" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>C语言教程_05：输入与输出</title>
    <link href="https://gitee.com/cloudstill/cloudstill.git/2022/10/20/C%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B-05%EF%BC%9A%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/"/>
    <id>https://gitee.com/cloudstill/cloudstill.git/2022/10/20/C%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B-05%EF%BC%9A%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/</id>
    <published>2022-10-20T00:22:48.000Z</published>
    <updated>2023-01-29T17:08:43.733Z</updated>
    
    <content type="html"><![CDATA[<h2 id="C语言中的输入与输出"><a href="#C语言中的输入与输出" class="headerlink" title="C语言中的输入与输出"></a>C语言中的输入与输出</h2><p>在第二节我们曾经介绍<code>#include&lt;stdio.h&gt;</code>的含义是包含一个标准输入输出的头文件，随即在第三节我们又学习了printf()语句。printf()是一个最为常见的输出语句，那么除此之外，C语言中还有那些输入输出语句呢？<br>C语言中有三对输入输出语句，由于格式相似，我们分三对介绍。</p><h2 id="最常用的输入输出语句：scanf-与printf"><a href="#最常用的输入输出语句：scanf-与printf" class="headerlink" title="最常用的输入输出语句：scanf()与printf()"></a>最常用的输入输出语句：scanf()与printf()</h2><p>作为相对应的输入输出字符，scanf()与printf()在形式上都是由一个英文单词加上format的缩写f构成，其使用起来也遵循类似的规则，使用起来都需要在括号内加入双引号来限定内容，将双引号内的内容原样输入或输出。正如\n这类转义字符具有特殊作用一样，在scanf()和printf()中还存在着一个特殊的，具有特殊作用而不被原样输出输出的符号，称之为格式字符。</p><h3 id="scanf-与printf-语句中的格式字符"><a href="#scanf-与printf-语句中的格式字符" class="headerlink" title="scanf()与printf()语句中的格式字符"></a>scanf()与printf()语句中的格式字符</h3><p>在scanf()和printf()中，形如%d这类%加字母的就被称之为格式字符。<br>格式字符，顾名思义，是来限定输出内容格式的，为了便于学习，我们在此只陈列一些最为常用的格式字符：</p><table><thead><tr><th align="center">格式字符</th><th align="center">格式说明</th></tr></thead><tbody><tr><td align="center">%d</td><td align="center">带符号的十进制整数</td></tr><tr><td align="center">%u</td><td align="center">无符号的十进制整数</td></tr><tr><td align="center">%c</td><td align="center">一个字符</td></tr><tr><td align="center">%s</td><td align="center">一个字符串</td></tr><tr><td align="center">%f</td><td align="center">浮点数，即小数</td></tr></tbody></table><p>当我们对输入输出的格式进行限定后， 此时我们会发现少了些什么：我们明确了输出输出的格式，却没有明确我们要格式化的对象，接下来我们就将要学习如何在输入输出语句中确定格式化的对象。</p><h3 id="用逗号间隔开来的补充说明：变量的首次运用"><a href="#用逗号间隔开来的补充说明：变量的首次运用" class="headerlink" title="用逗号间隔开来的补充说明：变量的首次运用"></a>用逗号间隔开来的补充说明：变量的首次运用</h3><p>类似于英语中的同位语，我们可以在括号内、引号后的位置使用逗号，从而确定我们要输入输出的对象。这个对象，可以是变量，也可以是含有变量的表达式。下面我们看一个例子来学习：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> example_1;</span><br><span class="line">    <span class="type">float</span> example_2;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %f&quot;</span>, &amp;example_1, &amp;example_2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %f&quot;</span>, example_1, example_2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="1.png"></p><p>通过这个例子，我们可以总结出3点规律：</p><ol><li>引号内内容应当原样输入输出，包括空格和其他字符；</li><li>引用变量时的格式字符应该与声明时的对应，不一致的格式可能会造成数据丢失或者报错；</li><li>输入语句scanf()中引用变量时要用上&amp;，&amp;的名称是取地址符，整个scanf()语句的意思就是将输入的值赋给变量所分配的地址，关于地址的更多详情，我们会在指针一节中提及，这里我们可以看做将输入的值赋给&amp;后的变量；</li></ol><h3 id="对格式字符的附加修饰"><a href="#对格式字符的附加修饰" class="headerlink" title="对格式字符的附加修饰"></a>对格式字符的附加修饰</h3><p>在实际运用中，我们可能还要对格式进行进一步要求，这里就引入了对格式字符的附加修饰字符，由于输出输出语句中修饰字符存在细微差别，我们这里分别介绍。<br>在输入语句中我们以整型%d为例，*%d表示数据在输入后不进行赋值，%nd表示将输入数据的前n位赋值，%hd表示输入短整型，%ld表示输入长整型。<br>在输出语句中我们以浮点型%f为例，%lf表示输出双精度double型，%mf表示输出数据最小宽度为m格，%mf表示输出数据最小宽度为m格且少的位置用0补齐，%.nf表示输出数据小数点后有n位，%-f表示输出数据想左靠。</p><h2 id="适用于字符的输入输出语句：getchar-与putchar"><a href="#适用于字符的输入输出语句：getchar-与putchar" class="headerlink" title="适用于字符的输入输出语句：getchar()与putchar()"></a>适用于字符的输入输出语句：getchar()与putchar()</h2><p>对于字符型乃至接下来所说的字符串型，它们也同样遵循上文我们所总结出来的第二条规律，即格式的相统一。<br>而不同它们和第一类相比，也有着许多不同之处，这里我们以输入输出的顺序依次介绍。</p><h3 id="关于getchar"><a href="#关于getchar" class="headerlink" title="关于getchar()"></a>关于getchar()</h3><p>作为简单的输入语句，getchar()在使用时有一下几点需要注意：</p><ol><li>getchar()会接收键盘输入的第一个字符，无论它是符号、数字、字母甚至是空格；</li><li>getchar()的赋值可以直接用等号，例如：<code>name = getchar</code>；</li></ol><h3 id="关于putchar"><a href="#关于putchar" class="headerlink" title="关于putchar()"></a>关于putchar()</h3><p>作为简单的输出语句，putchar()在使用时有一下几点需要注意：</p><ol><li>在对字符字符进行原样输出是括号内用的是单引号而非双引号；</li><li>括号内引号中可以是转义字符，例如<code>\101</code>就会输出<code>A</code>；</li><li>可以直接在括号内输入变量名来输出它所对应的字符；</li></ol><h2 id="适用于字符串的输入输出语句：gets-与puts"><a href="#适用于字符串的输入输出语句：gets-与puts" class="headerlink" title="适用于字符串的输入输出语句：gets()与puts()"></a>适用于字符串的输入输出语句：gets()与puts()</h2><p>字符串的输入输出可能会涉及指针等后续内容，本节内容我们将在指针后介绍。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>作为最常用的输入输出语句scanf()与printf()，学好它们以及配套的格式字符、修饰字符便足以应对大多数环境。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;C语言中的输入与输出&quot;&gt;&lt;a href=&quot;#C语言中的输入与输出&quot; class=&quot;headerlink&quot; title=&quot;C语言中的输入与输出&quot;&gt;&lt;/a&gt;C语言中的输入与输出&lt;/h2&gt;&lt;p&gt;在第二节我们曾经介绍&lt;code&gt;#include&amp;lt;stdio.h&amp;gt</summary>
      
    
    
    
    <category term="C语言教程" scheme="https://gitee.com/cloudstill/cloudstill.git/categories/C%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="C语言" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="教程" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>C语言教程_04：变量与常量</title>
    <link href="https://gitee.com/cloudstill/cloudstill.git/2022/10/19/C%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B-04%EF%BC%9A%E5%8F%98%E9%87%8F%E4%B8%8E%E5%B8%B8%E9%87%8F/"/>
    <id>https://gitee.com/cloudstill/cloudstill.git/2022/10/19/C%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B-04%EF%BC%9A%E5%8F%98%E9%87%8F%E4%B8%8E%E5%B8%B8%E9%87%8F/</id>
    <published>2022-10-19T10:37:08.000Z</published>
    <updated>2023-01-29T17:17:11.205Z</updated>
    
    <content type="html"><![CDATA[<h2 id="生活中变量与常量"><a href="#生活中变量与常量" class="headerlink" title="生活中变量与常量"></a>生活中变量与常量</h2><p>生活中会遇到很多量：一件商品的价格、每个月的生活费……这些量可以被分为两类：常量和变量。</p><ul><li>什么是常量？<br>顾名思义，一个常数、一个不变化的量，我们最熟悉的常量就是PAI、自然对数e。</li><li>什么是变量？<br>同样是顾名思义，一个变化的量就是变量。</li><li>常量大家都可以理解，可变量未必理解得容易，这里我们以《植物大战僵尸》为例。<br><img src="1.png"><br>在上图中，我们拥有100阳光，而一株豌豆的阳光价格为100。<br>对于阳光，我们所持有的阳光数量会随着我们对阳光的获取和消耗变化，这就是变量。<br>与此同时，豌豆的价格却始终是100，这就是一个常量。</li></ul><h2 id="C语言中的变量与常量"><a href="#C语言中的变量与常量" class="headerlink" title="C语言中的变量与常量"></a>C语言中的变量与常量</h2><p>生活中的变量和常量我们已经了解，那么C语言中的呢？<br>在C语言中，对应一个量而言，我们可以对其进行声明和定义两类操作。任何一个量，它的初始化，也就是声明都是必不可少的。这也就意味着，如果你没有对其进行定义，系统会随机对其定义一个值。<br>一个不变化的变量可以发挥常量的作用，可一个常量却不能随意变化，为了便于学习，我们在本节只介绍变量。</p><h3 id="C语言中变量的声明"><a href="#C语言中变量的声明" class="headerlink" title="C语言中变量的声明"></a>C语言中变量的声明</h3><p>在最开始我们介绍C程序时，我们说过一句话“int被称为关键字，其作用是指定义main函数返回值的类型为int型，int型即整型，暂且可以将其等价于整数”，当时你可能对这句话不太理解，没关系当我们介绍完变量的声明后，你就会明白。<br>首先我们必须要理解为什么要声明变量，在C语言中会有很多字符，如果我们不声明一个字符，我们就无法判定这个字符是一个变量名，更别说它的类型了。<br>敏锐的读者会注意到上述文字中的两个关键点，变量名和变量的类型</p><h3 id="变量名的命名规范与艺术"><a href="#变量名的命名规范与艺术" class="headerlink" title="变量名的命名规范与艺术"></a>变量名的命名规范与艺术</h3><p>如同人有名字一样，每一个变量也有着它的名字，作为程序员的我们，就像变量的父母一样，拥有着给它们取名的权利。同样，正如现实生活中取名字有一定规范一样，我们给变量取名也要遵循一定的规则，具体规则如下：</p><ol><li>变量名的开头必须为字母或下划线，大小写均可；</li><li>变量名中不可以有符号，但是可以有下划线，也就是“_”；</li><li>变量名中允许使用任意的大小写字母以及数字；</li><li>变量名不能与关键字同名；</li></ol><p>如同人有名字一样，变量名也有“好听”与“不好听”的区别。只不过不同于人对名字的要求，变量名遵循一个简单的原则，即“顾名思义”。<br>一个好的变量名应当是简洁明了的，用abcd来表示四个变量这样简单的命名方式固然方便快捷，可在一个有着很多变量的程序中轻易就会被混淆，加之很少有人会有勤写注释的习惯，一个自己写的程序过上几天也会看得一头雾水。<br>而用number_1，number_2来表示两个变量这样的命名方式呢？<br>这样的命名方式确实做到了顾名思义，也值得我们倡导，可在实际编写中，number不如简化成num，num_1,num_2这样的命名方式会更加简明。<br>一个好的C程序并不是说没有bug就可以了，变量名的艺术也值得我们深入研究。</p><p>注：实际操作中变量名的取名要视环境而定，比如那种写一次就行了的比赛题目，随便取个abcd完全可以。</p><h3 id="变量的类型"><a href="#变量的类型" class="headerlink" title="变量的类型"></a>变量的类型</h3><p>在之前我们就说过int作为关键字所声明的是int型，即整型，可视为整数。有短整型就有长整型，有整数就有小数，有整数型就有小数型。只不过在C语言中小数并不称为小数，小数型也不叫小数型，它们分别称为浮点数和浮点型，除此之外还有一种类型为字符型。<br>整数型和字符型可以并为整数类型，它们遵循以下表格中的规律：</p><table><thead><tr><th align="center">类型</th><th align="center">存储大小</th><th align="center">值范围</th></tr></thead><tbody><tr><td align="center">char</td><td align="center">1 字节</td><td align="center">-128 到 127 或 0 到 255</td></tr><tr><td align="center">unsigned char</td><td align="center">1 字节</td><td align="center">0 到 255</td></tr><tr><td align="center">signed char</td><td align="center">1 字节</td><td align="center">-128 到 127</td></tr><tr><td align="center">int</td><td align="center">2 或 4 字节</td><td align="center">-32,768 到 32,767 或 -2,147,483,648 到 2,147,483,647</td></tr><tr><td align="center">unsigned int</td><td align="center">2 或 4 字节</td><td align="center">0 到 65,535 或 0 到 4,294,967,295</td></tr><tr><td align="center">short</td><td align="center">2 字节</td><td align="center">0 到 65,535</td></tr><tr><td align="center">unsigned short</td><td align="center">2 字节</td><td align="center">1.2E-38 到 3.4E+38</td></tr><tr><td align="center">long</td><td align="center">4 字节</td><td align="center">-2,147,483,648 到 2,147,483,647</td></tr><tr><td align="center">unsigned long</td><td align="center">4 字节</td><td align="center">0 到 4,294,967,295</td></tr></tbody></table><p>注：各种类型的存储大小与系统位数有关，但目前通用的以64位为主。</p><p>而与整数类型相对的浮点类型则遵循以下表格：</p><table><thead><tr><th align="center">类型</th><th align="center">存储大小</th><th align="center">值范围</th><th align="center">精度</th></tr></thead><tbody><tr><td align="center">float</td><td align="center">4 字节</td><td align="center">1.2E-38 到 3.4E+38</td><td align="center">6 位有效位</td></tr><tr><td align="center">double</td><td align="center">8 字节</td><td align="center">2.3E-308 到 1.7E+308</td><td align="center">15 位有效位</td></tr><tr><td align="center">long double</td><td align="center">16 字节</td><td align="center">3.4E-4932 到 1.1E+4932</td><td align="center">19 位有效位</td></tr></tbody></table><p>对于这样的表格记忆是很困难的，我们只需要记住一些基础的就可以应对大多数情况了。<br>我们可以先记住char为字符型，int为短整型，如果数据很大就换成long。如果数据为小数就用单精度浮点型float声明，对精度要求很高或是数据过大就用双精度型double。</p><h3 id="C语言中变量的定义"><a href="#C语言中变量的定义" class="headerlink" title="C语言中变量的定义"></a>C语言中变量的定义</h3><p>当我们声明一个变量后，我们需要对它进行赋值，这个过程就称之为定义，变量的定义可以以多个方式进行，这里我们以int为例，有以下情况：<br>1.声明时定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> example_1 = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>在声明的同时定义，把1的值赋给变量example_1.<br>2.声明后定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> example_2;</span><br><span class="line">emaxple_2 = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>在声明后定义，将2的值赋给变量example_2.<br>变量的定义相对自由，&#x3D;后面可以跟其他变量和表达式（如 <code>加+</code> <code>减-</code> <code>乘*</code> <code>除/</code> <code>取余%</code> 所连接的式子）。<br>值得注意的是，在上面我介绍<code>=</code>时我所用的是赋值而非相等，这是一个比较严谨的称呼，在C语言中判断是否相等时我们需要用的是<code>==</code>；另一个值得注意的点是，当<code>=</code>左右数据类型不相等时，会转化成左边变量的数据类型，这也就意味着，将浮点型赋值给整数型时会损失小数点后的内容，将高精度浮点型赋值给低精度浮点型时会损失所相差的那一部分精度。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>Frank曾经说过，变量是玩会的而不是学会的，这也就是为什么我要以《植物大战僵尸》为例的原因。<br>单纯的介绍变量并不能让人完全理解它，在下一节我们将学习C语言中的输入与输出（我们已经学过的printf()就是一个输出语句），届时我们就能领会到变量的神奇之处。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;生活中变量与常量&quot;&gt;&lt;a href=&quot;#生活中变量与常量&quot; class=&quot;headerlink&quot; title=&quot;生活中变量与常量&quot;&gt;&lt;/a&gt;生活中变量与常量&lt;/h2&gt;&lt;p&gt;生活中会遇到很多量：一件商品的价格、每个月的生活费……这些量可以被分为两类：常量和变量。&lt;/</summary>
      
    
    
    
    <category term="C语言教程" scheme="https://gitee.com/cloudstill/cloudstill.git/categories/C%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="C语言" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="教程" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>C语言教程_03：printf()与转义字符</title>
    <link href="https://gitee.com/cloudstill/cloudstill.git/2022/10/19/C%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B-03%EF%BC%9Aprintf%E4%B8%8E%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6/"/>
    <id>https://gitee.com/cloudstill/cloudstill.git/2022/10/19/C%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B-03%EF%BC%9Aprintf%E4%B8%8E%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6/</id>
    <published>2022-10-19T04:50:15.000Z</published>
    <updated>2023-01-29T17:15:24.201Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于printf"><a href="#关于printf" class="headerlink" title="关于printf()"></a>关于printf()</h2><p>在上一节中我们以一个程序为例展开我们C语言学习的第一步，这节我们将再次以它为例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 我的第一个 C 程序 */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello, World! \n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上一节我们介绍C程序结构时，我们并没有探讨printf()后面跟的()以及其中的内容。以上述程序为例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello, World! \n&quot;</span>);</span><br></pre></td></tr></table></figure><p>括号所构成的一个整体可以看作printf()的一个宾语，相当于语言学中的动宾结构。<br>而括号内的内容我们可以看到是由一对引号包裹在内的，并且当我们实际运行该程序时，这个引号并没有显示出来，而引号内的其他内容（除了\n）都被原样打印了出来。<br>由此我们可以知道printf()在打印时，会原样地打印出括号内引号所包裹的大部分内容。<br>那么，为什么\n不会被打印呢？</p><h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><p>转义字符（Escape character），所有的ASCII码都可以用“\”加数字（一般是8进制数字）来表示。而C中定义了一些字母前加”&quot;来表示常见的那些不能显示的ASCII字符，如\0,\t,\n等，就称为转义字符，因为后面的字符，都不是它本来的ASCII字符意思了。<br>关于ASCII码大家可以自行或<a class="link" href="http://c.biancheng.net/c/ascii/">点击此处<i class="fas fa-external-link-alt"></i></a>了解更多。</p><h3 id="关于-n"><a href="#关于-n" class="headerlink" title="关于\n"></a>关于\n</h3><p>在介绍printf()时，我们曾疑惑于为何\n不会被打印出来，而在刚刚我们了解到了转义字符，明白了转义字符的意义，同时也知道了转义字符不会被显示出来的机制。<br>那么\n所代表的是什么意思呢？<br>如果你尝试过在我们演示的代码里加入多行printf()而不加\n，你会发现这些内容前后连接到了一起；而如果你加入了\n，你会发现它们一行一行分布。<br>由此我们很容易才想到\n所起到的是换行的作用。<br>那么除了\n，还有哪些转义字符呢？</p><h3 id="转义字符表"><a href="#转义字符表" class="headerlink" title="转义字符表"></a>转义字符表</h3><table><thead><tr><th align="center">转义字符</th><th align="center">意义</th><th align="center">ASCII码值（十进制）</th></tr></thead><tbody><tr><td align="center">\a</td><td align="center">响铃(BEL)</td><td align="center">007</td></tr><tr><td align="center">\b</td><td align="center">退格(BS) ，将当前位置移到前一列</td><td align="center">008</td></tr><tr><td align="center">\f</td><td align="center">换页(FF)，将当前位置移到下页开头</td><td align="center">012</td></tr><tr><td align="center">\n</td><td align="center">换行(LF) ，将当前位置移到下一行开头</td><td align="center">010</td></tr><tr><td align="center">\r</td><td align="center">回车(CR) ，将当前位置移到本行开头</td><td align="center">013</td></tr><tr><td align="center">\t</td><td align="center">水平制表(HT)</td><td align="center">009</td></tr><tr><td align="center">\v</td><td align="center">垂直制表(VT)</td><td align="center">011</td></tr><tr><td align="center">\‘</td><td align="center">单引号</td><td align="center">039</td></tr><tr><td align="center">\“</td><td align="center">双引号</td><td align="center">034</td></tr><tr><td align="center">\\</td><td align="center">反斜杠</td><td align="center">092</td></tr></tbody></table><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>转义字符是C语言中为数不多需要记忆的东西，但我们并不倡导死记硬背，你应当去尝试上述每一个转义字符，在实践中感受它们的作用。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;关于printf&quot;&gt;&lt;a href=&quot;#关于printf&quot; class=&quot;headerlink&quot; title=&quot;关于printf()&quot;&gt;&lt;/a&gt;关于printf()&lt;/h2&gt;&lt;p&gt;在上一节中我们以一个程序为例展开我们C语言学习的第一步，这节我们将再次以它为例：&lt;/</summary>
      
    
    
    
    <category term="C语言教程" scheme="https://gitee.com/cloudstill/cloudstill.git/categories/C%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="C语言" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="教程" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode_1_两数之和</title>
    <link href="https://gitee.com/cloudstill/cloudstill.git/2022/10/11/LeetCode-1-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <id>https://gitee.com/cloudstill/cloudstill.git/2022/10/11/LeetCode-1-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</id>
    <published>2022-10-11T15:21:16.000Z</published>
    <updated>2023-01-29T17:43:37.652Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><blockquote><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。<br>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。<br>你可以按任意顺序返回答案。<br>示例 1：<br>输入：nums &#x3D; [2,7,11,15], target &#x3D; 9<br>输出：[0,1]<br>解释：因为 nums[0] + nums[1] &#x3D;&#x3D; 9 ，返回 [0, 1] 。<br>示例 2：<br>输入：nums &#x3D; [3,2,4], target &#x3D; 6<br>输出：[1,2]<br>示例 3：<br>输入：nums &#x3D; [3,3], target &#x3D; 6<br>输出：[0,1]<br> 提示：<br>2 &lt;&#x3D; nums.length &lt;&#x3D; 104<br>-109 &lt;&#x3D; nums[i] &lt;&#x3D; 109<br>-109 &lt;&#x3D; target &lt;&#x3D; 109<br>只会存在一个有效答案<br>进阶：你可以想出一个时间复杂度小于 O(n2) 的算法吗？</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>太难了，还不会。</p><h3 id="程序实例"><a href="#程序实例" class="headerlink" title="程序实例"></a>程序实例</h3><p>有人相爱，有人夜里开车看海，有人leetcode第一题都做不出来。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 </summary>
      
    
    
    
    <category term="LeetCode" scheme="https://gitee.com/cloudstill/cloudstill.git/categories/LeetCode/"/>
    
    
    <category term="C语言" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="练习" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/%E7%BB%83%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>蓝桥杯_基础练习_Fibonacci数列</title>
    <link href="https://gitee.com/cloudstill/cloudstill.git/2022/10/09/%E8%93%9D%E6%A1%A5%E6%9D%AF-%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0-Fibonacci%E6%95%B0%E5%88%97/"/>
    <id>https://gitee.com/cloudstill/cloudstill.git/2022/10/09/%E8%93%9D%E6%A1%A5%E6%9D%AF-%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0-Fibonacci%E6%95%B0%E5%88%97/</id>
    <published>2022-10-09T11:46:21.000Z</published>
    <updated>2023-01-29T17:44:33.651Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><blockquote><p>资源限制<br>内存限制：256.0MB   C&#x2F;C++时间限制：1.0s   Java时间限制：3.0s Python时间限制：5.0s<br>问题描述<br>Fibonacci数列的递推公式为：Fn&#x3D;Fn-1+Fn-2，其中F1&#x3D;F2&#x3D;1。<br>当n比较大时，Fn也非常大，现在我们想知道，Fn除以10007的余数是多少。<br>输入格式<br>输入包含一个整数n。<br>输出格式<br>输出一行，包含一个整数，表示Fn除以10007的余数。<br>说明：在本题中，答案是要求Fn除以10007的余数，因此我们只要能算出这个余数即可，而不需要先计算出Fn的准确值，再将计算的结果除以10007取余数，直接计算余数往往比先算出原数再取余简单。<br>样例输入<br>10<br>样例输出<br>55<br>样例输入<br>22<br>样例输出<br>7704<br>数据规模与约定<br>1 &lt;&#x3D; n &lt;&#x3D; 1,000,000。</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>通过循环遍历每一个数直到求出结果。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>由于C语言中对于局部变量和全局变量分配的内存不同，在本例中使用局部变量可能会导致栈内存溢出从而报错，关于该问题你可以点击此处了解更多。<br>同时，将取余符号放在循环中也是为了避免溢出问题。</p><h3 id="程序实例"><a href="#程序实例" class="headerlink" title="程序实例"></a>程序实例</h3><p>由于一些无法避免的原因，我将代码放到评论中。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;资源限制&lt;br&gt;内存限制：256.0MB   C&amp;#x2F;C++时间限制：1.0s   Java时间限制：3.0</summary>
      
    
    
    
    <category term="蓝桥杯" scheme="https://gitee.com/cloudstill/cloudstill.git/categories/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
    
    <category term="C语言" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="练习" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/%E7%BB%83%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>蓝桥杯_基础练习_圆的面积</title>
    <link href="https://gitee.com/cloudstill/cloudstill.git/2022/10/09/%E8%93%9D%E6%A1%A5%E6%9D%AF-%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0-%E5%9C%86%E7%9A%84%E9%9D%A2%E7%A7%AF/"/>
    <id>https://gitee.com/cloudstill/cloudstill.git/2022/10/09/%E8%93%9D%E6%A1%A5%E6%9D%AF-%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0-%E5%9C%86%E7%9A%84%E9%9D%A2%E7%A7%AF/</id>
    <published>2022-10-09T08:46:16.000Z</published>
    <updated>2023-01-29T17:45:23.387Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><blockquote><p>源限制<br>内存限制：256.0MB   C&#x2F;C++时间限制：1.0s   Java时间限制：3.0s   Python时间限制：5.0s<br>问题描述<br>给定圆的半径r，求圆的面积。<br>输入格式<br>输入包含一个整数r，表示圆的半径。<br>输出格式<br>输出一行，包含一个实数，四舍五入保留小数点后7位，表示圆的面积。<br>说明：在本题中，输入是一个整数，但是输出是一个实数。<br>对于实数输出的问题，请一定看清楚实数输出的要求，比如本题中要求保留小数点后7位，则你的程序必须严格的输出7位小数，输出过多或者过少的小数位数都是不行的，都会被认为错误。<br>实数输出的问题如果没有特别说明，舍入都是按四舍五入进行。<br>样例输入<br>4<br>样例输出<br>50.2654825<br>数据规模与约定<br>1 &lt;&#x3D; r &lt;&#x3D; 10000。<br>提示<br>本题对精度要求较高，请注意π的值应该取较精确的值。你可以使用常量来表示π，比如PI&#x3D;3.14159265358979323，也可以使用数学公式来求π，比如PI&#x3D;atan(1.0)*4。  </p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>简单运算，注意数据类型。</p><h3 id="程序实例"><a href="#程序实例" class="headerlink" title="程序实例"></a>程序实例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PI 3.14159265358979323</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> r;</span><br><span class="line">    <span class="type">double</span> c;</span><br><span class="line">    scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;r);</span><br><span class="line">    c = (<span class="type">double</span>)r * r * PI;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%0.7lf\n&quot;</span>, c + <span class="number">0.00000005</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;源限制&lt;br&gt;内存限制：256.0MB   C&amp;#x2F;C++时间限制：1.0s   Java时间限制：3.0s</summary>
      
    
    
    
    <category term="蓝桥杯" scheme="https://gitee.com/cloudstill/cloudstill.git/categories/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
    
    <category term="C语言" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="练习" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/%E7%BB%83%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>蓝桥杯_基础练习_序列求和</title>
    <link href="https://gitee.com/cloudstill/cloudstill.git/2022/10/09/%E8%93%9D%E6%A1%A5%E6%9D%AF-%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0-%E5%BA%8F%E5%88%97%E6%B1%82%E5%92%8C/"/>
    <id>https://gitee.com/cloudstill/cloudstill.git/2022/10/09/%E8%93%9D%E6%A1%A5%E6%9D%AF-%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0-%E5%BA%8F%E5%88%97%E6%B1%82%E5%92%8C/</id>
    <published>2022-10-09T08:19:06.000Z</published>
    <updated>2023-01-29T17:46:30.154Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><blockquote><p>资源限制<br>内存限制：256.0MB   C&#x2F;C++时间限制：1.0s   Java时间限制：3.0s   Python时间限制：5.0s<br>问题描述<br>求1+2+3+…+n的值。<br>输入格式<br>输入包括一个整数n。<br>输出格式<br>输出一行，包括一个整数，表示1+2+3+…+n的值。<br>样例输入<br>4<br>样例输出<br>10<br>样例输入<br>100<br>说明：有一些试题会给出多组样例输入输出以帮助你更好的做题。<br>一般在提交之前所有这些样例都需要测试通过才行，但这不代表这几组样例数据都正确了你的程序就是完全正确的，潜在的错误可能仍然导致你的得分较低。<br>样例输出<br>5050<br>数据规模与约定<br>1 &lt;&#x3D; n &lt;&#x3D; 1,000,000,000。<br>说明：请注意这里的数据规模。<br>本题直接的想法是直接使用一个循环来累加，然而，当数据规模很大时，这种“暴力”的方法往往会导致超时。此时你需要想想其他方法。你可以试一试，如果使用1000000000作为你的程序的输入，你的程序是不是能在规定的上面规定的时限内运行出来。<br>本题另一个要值得注意的地方是答案的大小不在你的语言默认的整型(int)范围内，如果使用整型来保存结果，会导致结果错误。<br>如果你使用C++或C语言而且准备使用printf输出结果，则你的格式字符串应该写成%I64d以输出long long类型的整数。  </p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>可以使用for循环从1累加到n，但这种方法较为笨拙，故思考采用高斯方法求数列和。</p><h3 id="程序实例"><a href="#程序实例" class="headerlink" title="程序实例"></a>程序实例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> n, m;</span><br><span class="line">    scanf_s(<span class="string">&quot;%I64d&quot;</span>, &amp;n);</span><br><span class="line">    m = (<span class="number">1</span> + n) * n / <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%I64d\n&quot;</span>, m);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;资源限制&lt;br&gt;内存限制：256.0MB   C&amp;#x2F;C++时间限制：1.0s   Java时间限制：3.0</summary>
      
    
    
    
    <category term="蓝桥杯" scheme="https://gitee.com/cloudstill/cloudstill.git/categories/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
    
    <category term="C语言" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="练习" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/%E7%BB%83%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>蓝桥杯_基础练习_数列排序</title>
    <link href="https://gitee.com/cloudstill/cloudstill.git/2022/10/07/%E8%93%9D%E6%A1%A5%E6%9D%AF-%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0-%E6%95%B0%E5%88%97%E6%8E%92%E5%BA%8F/"/>
    <id>https://gitee.com/cloudstill/cloudstill.git/2022/10/07/%E8%93%9D%E6%A1%A5%E6%9D%AF-%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0-%E6%95%B0%E5%88%97%E6%8E%92%E5%BA%8F/</id>
    <published>2022-10-06T16:25:54.000Z</published>
    <updated>2023-01-29T17:47:09.655Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><blockquote><p>资源限制<br>内存限制：512.0MB   C&#x2F;C++时间限制：1.0s   Java时间限制：3.0s   Python时间限制：5.0s<br>问题描述<br>给定一个长度为n的数列，将这个数列按从小到大的顺序排列。1&lt;&#x3D;n&lt;&#x3D;200<br>输入格式<br>第一行为一个整数n。<br>第二行包含n个整数，为待排序的数，每个整数的绝对值小于10000。<br>输出格式<br>输出一行，按从小到大的顺序输出排序后的数列。<br>样例输入<br>5<br>8 3 6 4 9<br>样例输出<br>3 4 6 8 9  </p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>将数列放入数组中，将其依次进行两两比较并移动，保证较小的数永远位于较大的数右边，当遍历整个数组后即可输出合规的结果。为了简化程序，考虑引入函数来执行两两比较并移动的操作，此处需要注意的是局部变量和全局变量的关系，考虑引入指针来解决此问题。</p><h3 id="程序实例"><a href="#程序实例" class="headerlink" title="程序实例"></a>程序实例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    <span class="type">int</span> a, b, c;</span><br><span class="line">    <span class="type">int</span> NUM[<span class="number">200</span>];</span><br><span class="line">    scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (m = <span class="number">0</span>; m &lt; n; m++)</span><br><span class="line">    &#123;</span><br><span class="line">        scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;NUM[m]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (a = <span class="number">0</span>; a &lt; n; a++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (b = <span class="number">0</span>; b &lt; n; b++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (a &lt; b)</span><br><span class="line">            &#123;</span><br><span class="line">                swap(&amp;NUM[a], &amp;NUM[b]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (c = <span class="number">0</span>; c &lt; n; c++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, NUM[c]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>* num1, <span class="type">int</span>* num2)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">if</span> ( *num1 &gt; *num2 )</span><br><span class="line">    &#123;</span><br><span class="line">        i = *num2;</span><br><span class="line">        *num2 = *num1;</span><br><span class="line">        *num1 = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实例输出"><a href="#实例输出" class="headerlink" title="实例输出"></a>实例输出</h3><p><img src="1.png"></p><h2 id="进阶方向"><a href="#进阶方向" class="headerlink" title="进阶方向"></a>进阶方向</h2><p>考虑简化。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;资源限制&lt;br&gt;内存限制：512.0MB   C&amp;#x2F;C++时间限制：1.0s   Java时间限制：3.0</summary>
      
    
    
    
    <category term="蓝桥杯" scheme="https://gitee.com/cloudstill/cloudstill.git/categories/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
    
    <category term="C语言" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="练习" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/%E7%BB%83%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>菜鸟教程C语言经典100例_02</title>
    <link href="https://gitee.com/cloudstill/cloudstill.git/2022/10/07/%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8BC%E8%AF%AD%E8%A8%80%E7%BB%8F%E5%85%B8100%E4%BE%8B_02/"/>
    <id>https://gitee.com/cloudstill/cloudstill.git/2022/10/07/%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8BC%E8%AF%AD%E8%A8%80%E7%BB%8F%E5%85%B8100%E4%BE%8B_02/</id>
    <published>2022-10-06T16:13:13.000Z</published>
    <updated>2023-01-29T17:40:59.502Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><blockquote><p>企业发放的奖金根据利润提成。<br>利润(I)低于或等于10万元时，奖金可提10%；<br>利润高于10万元，低于20万元时，低于10万元的部分按10%提成，高于10万元的部分，可提成7.5%；<br>20万到40万之间时，高于20万元的部分，可提成5%；<br>40万到60万之间时高于40万元的部分，可提成3%；<br>60万到100万之间时，高于60万元的部分，可提成1.5%；<br>高于100万元时，超过100万元的部分按1%提成。<br>从键盘输入当月利润I，求应发放奖金总数？</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>通过判定利润i的大小对其进行分段计算。</p><h3 id="程序实例"><a href="#程序实例" class="headerlink" title="程序实例"></a>程序实例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> i,j;</span><br><span class="line">    <span class="type">double</span> i_1, i_2, i_3, i_4, i_5;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入利润\n&quot;</span>);</span><br><span class="line">    scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;i);</span><br><span class="line">    i_1 = <span class="number">100000</span> * <span class="number">0.10</span>;</span><br><span class="line">    i_2 = i_1 + <span class="number">100000</span> * <span class="number">0.075</span>;</span><br><span class="line">    i_3 = i_1 + i_2 + <span class="number">200000</span> * <span class="number">0.05</span>;</span><br><span class="line">    i_4 = i_1 + i_2 + i_3 + <span class="number">200000</span> * <span class="number">0.03</span>;</span><br><span class="line">    i_5 = i_1 + i_2 + i_3 + i_4 + <span class="number">400000</span> * <span class="number">0.01</span>;</span><br><span class="line">    <span class="keyword">if</span> (i &lt;= <span class="number">100000</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        j = i * <span class="number">0.10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (i&lt;=<span class="number">200000</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        j = i_1 + (i - <span class="number">100000</span>) * <span class="number">0.075</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (i &lt;= <span class="number">400000</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        j = i_2 + (i - <span class="number">200000</span>) * <span class="number">0.05</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (i &lt;= <span class="number">600000</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        j = i_3 + (i - <span class="number">400000</span>) * <span class="number">0.03</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (i &lt;= <span class="number">1000000</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        j = i_4 + (i - <span class="number">600000</span>) * <span class="number">0.015</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (i &gt; <span class="number">1000000</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        j = i_5 + (i - <span class="number">1000000</span>) * <span class="number">0.01</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;提成为：%lf&quot;</span>, j);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="进阶方向"><a href="#进阶方向" class="headerlink" title="进阶方向"></a>进阶方向</h2><p>简化程序。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;企业发放的奖金根据利润提成。&lt;br&gt;利润(I)低于或等于10万元时，奖金可提10%；&lt;br&gt;利润高于10万元，低于</summary>
      
    
    
    
    <category term="菜鸟教程C语言经典100例练习" scheme="https://gitee.com/cloudstill/cloudstill.git/categories/%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8BC%E8%AF%AD%E8%A8%80%E7%BB%8F%E5%85%B8100%E4%BE%8B%E7%BB%83%E4%B9%A0/"/>
    
    
    <category term="C语言" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="练习" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/%E7%BB%83%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>C语言教程_02：一个简单的C程序</title>
    <link href="https://gitee.com/cloudstill/cloudstill.git/2022/10/06/C%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B-02%EF%BC%9A%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84C%E7%A8%8B%E5%BA%8F/"/>
    <id>https://gitee.com/cloudstill/cloudstill.git/2022/10/06/C%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B-02%EF%BC%9A%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84C%E7%A8%8B%E5%BA%8F/</id>
    <published>2022-10-06T12:20:11.000Z</published>
    <updated>2023-01-29T17:10:42.963Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一个简单的C程序"><a href="#一个简单的C程序" class="headerlink" title="一个简单的C程序"></a>一个简单的C程序</h2><p>在接触C语言之前，大家或多或少会对C语言产生敬畏之心，认为它是一门很高深的语言，实则不然，且看代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 我的第一个 C 程序 */</span></span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;Hello, World! \n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 注：以//打头的某一行或者用/**/括起来的数行在程序中统称为注释，不会被编译器所编译</span></span><br><span class="line"><span class="comment">// 一个好的注释对于程序而言是很重要的，它不仅可以让别人看懂你的代码，也可以便于自我的纠察</span></span><br></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="02.jpg"></p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>观察这个程序代码，大家会发现它非常的简单，然而，作为一个程序它却相当完整。<br>我们可以简单将其分为三个部分，一是由<code>#include</code>打头的部分，二是<code>int main()</code>，三则是<code>&#123;&#125;</code>内的内容，这三个部分的存在，也就构成了一个完整的C程序<br>接下来将对这三个部分进行逐一分析。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br></pre></td></tr></table></figure><p>#号所起的是一个标识的作用，是一个规范，可以看作无实际意义。include在英文中有包含的意思。stdio.h可以分为四个部分解读，std是standard的缩写，standard意为标准；i是input的缩写，input意为输入；o是output的缩写，output意为输出；h是head的缩写，head意为头，而.h顾名思义则是头文件的后缀。将这样一段代码逐字分析后拼接在一起，清晰指向了一个信息“这个程序可能包含一个标准输入输出的头文件”。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br></pre></td></tr></table></figure><p>int被称为关键字，其作用是指定义main函数返回值的类型为int型，int型即整型，暂且可以将其等价于整数。在程序中这一部分称为函数头。main函数作为C程序中至关重要的部分，在每一个C程序中都会有一个main函数，作为一个程序的入口部分，也就是说程序都是从main函数头开始执行，然后进入到main函数中，执行其中语句的。()内的内容是我们可以填充的，初学C程序，可以暂且不管。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;......&quot;</span>);</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>{}可以起到一个囊括的作用，其内部作为一个整体，称之为函数体。printf()作为其中的一部分，我们将其成为执行语句，其中print的意思为打印或者输出，而f是format的缩写，意为格式化，故printf()的意思就是格式化输出括号内的内容。这里我们提到一个词输出，正是我们之前所提到了的“标准输入输出”中的“输出”。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>return 0并不属于执行语句，我们将其称之为return语句。return的作用是向程序返回一个值，在这里就是0，而0又恰好是一个整数，符合int类型。<br>值得一提的是，C程序是严格区分中英文的，一切语句都要用英文进行书写，且在函数体内部的内容，执行语句和return语句末尾，都要加上；表示一条语句的结束，这也就意味着，C程序在编译时会跳过空格以及空行（和注释）直接跳到下一条语句。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对这样一个代码进行逐字分析后，相信大家对于C程序的概念有了一个具体的认知，并且，对于C语言不再过于恐惧。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一个简单的C程序&quot;&gt;&lt;a href=&quot;#一个简单的C程序&quot; class=&quot;headerlink&quot; title=&quot;一个简单的C程序&quot;&gt;&lt;/a&gt;一个简单的C程序&lt;/h2&gt;&lt;p&gt;在接触C语言之前，大家或多或少会对C语言产生敬畏之心，认为它是一门很高深的语言，实则不然，且</summary>
      
    
    
    
    <category term="C语言教程" scheme="https://gitee.com/cloudstill/cloudstill.git/categories/C%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="C语言" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="教程" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>C语言教程_01：编译环境</title>
    <link href="https://gitee.com/cloudstill/cloudstill.git/2022/10/06/C%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B-01%EF%BC%9A%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83/"/>
    <id>https://gitee.com/cloudstill/cloudstill.git/2022/10/06/C%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B-01%EF%BC%9A%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83/</id>
    <published>2022-10-06T11:59:16.000Z</published>
    <updated>2023-01-29T17:05:06.830Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>学习C语言，一个好用的ide必不可少。<br>目前各大高校大多采用的是VC++6.0作为编译环境，众所周知，这款ide由微软于1993年推出，其年龄相较于我而言也要大上10岁。<br>计算机学科本身就是一门走在时代前沿需要创新的学科，一款落后于时代的ide，即使它十分经典，在笔者看来，也是可以被优化的。</p><h2 id="Visual-Studio-2022"><a href="#Visual-Studio-2022" class="headerlink" title="Visual Studio 2022"></a>Visual Studio 2022</h2><p>本教程推荐Visual Studio 2022作为编译环境，其原因有以下几点，一是由于它够新，对于新手学习C语言而言其相对比较友好，一旦体验过&#96;Visual Studio 2022和其他ide，如上文所提及的VC++6.0，你就明显感觉到它的好用；二则是你可以在Visual Studio官网免费下载Visual Studio Community 2022。<br>你可以通过搜索引擎搜索Visual Studio 2022到官网下载，你也可以<a class="link" href="https://visualstudio.microsoft.com/zh-hans/vs/">点击此处<i class="fas fa-external-link-alt"></i></a>进行下载。</p><h3 id="Visual-Studio-2022使用教学"><a href="#Visual-Studio-2022使用教学" class="headerlink" title="Visual Studio 2022使用教学"></a>Visual Studio 2022使用教学</h3><p>关于Visual Studio 2022的使用教学，受限于文字形式，无法具体地和大家展开，这里推荐B站的一位up主，同时也是我C语言的启蒙老师：<a class="link" href="https://space.bilibili.com/19658621">Micro_Frank<i class="fas fa-external-link-alt"></i></a><br>你也可以在B站搜索由他创作的 vs2022(Visual Studio 2022)权威指南&amp;&amp;C语言&amp;&amp;软件工程开发的方向&amp;&amp;技巧要领<br>你可以<a class="link" href="https://www.bilibili.com/video/BV1Xt411g7jT/">点击此处<i class="fas fa-external-link-alt"></i></a>直接观看教程</p><h3 id="Visual-Studio-2022无法下载"><a href="#Visual-Studio-2022无法下载" class="headerlink" title="Visual Studio 2022无法下载"></a>Visual Studio 2022无法下载</h3><p>目前从官网下载Visual Studio 2022时可能会存在下载进度静止不动的问题，这里提供一种<a class="link" href="https://blog.csdn.net/weixin_66712181/article/details/122719473">解决方案<i class="fas fa-external-link-alt"></i></a></p><h2 id="Dev-C"><a href="#Dev-C" class="headerlink" title="Dev-C++"></a>Dev-C++</h2><p>此外你也可以选用Dev-C++作为你的编译环境，Dev-C++作为一款较为简单的ide，是许多比赛项目的指定的ide之一。出于此，本教程选用Dev作为编译环境。<br>同样你可以<a class="link" href="https://sourceforge.net/projects/orwelldevcpp/">点击此处<i class="fas fa-external-link-alt"></i></a>下载。</p><h2 id="CLion"><a href="#CLion" class="headerlink" title="CLion"></a>CLion</h2><p>CLion作为JetBrains开发的一款ide，我们耳熟能详的PyCharm和IntelliJ同时也出自其旗下，官方正版的CLion并不免费，你可以<a class="link" href="https://www.jetbrains.com.cn/clion/">点击此处<i class="fas fa-external-link-alt"></i></a>下载。</p><h2 id="Visual-Studio-Code"><a href="#Visual-Studio-Code" class="headerlink" title="Visual Studio Code"></a>Visual Studio Code</h2><p>VS Code作为微软公司开发的另一款ide，经调试可以支持多种语言，同时具有轻量化的优点，你可以<a class="link" href="https://code.visualstudio.com/">点击此处<i class="fas fa-external-link-alt"></i></a>下载。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;学习C语言，一个好用的ide必不可少。&lt;br&gt;目前各大高校大多采用的是VC++6.0作为编译环境，众所周知，这款ide由微软于1993年推出</summary>
      
    
    
    
    <category term="C语言教程" scheme="https://gitee.com/cloudstill/cloudstill.git/categories/C%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="C语言" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="教程" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>菜鸟教程C语言经典100例_01</title>
    <link href="https://gitee.com/cloudstill/cloudstill.git/2022/10/06/%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8BC%E8%AF%AD%E8%A8%80%E7%BB%8F%E5%85%B8100%E4%BE%8B-01/"/>
    <id>https://gitee.com/cloudstill/cloudstill.git/2022/10/06/%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8BC%E8%AF%AD%E8%A8%80%E7%BB%8F%E5%85%B8100%E4%BE%8B-01/</id>
    <published>2022-10-06T05:11:20.000Z</published>
    <updated>2023-01-29T17:47:34.915Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><blockquote><p>有 1、2、3、4 四个数字，能组成多少个互不相同且无重复数字的三位数？都是多少？</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>可填在百位、十位、个位的数字都是 1、2、3、4，组成所有的排列后再去掉不满足条件的排列。</p><h3 id="程序实例"><a href="#程序实例" class="headerlink" title="程序实例"></a>程序实例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j,k;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;<span class="number">5</span>;i++)<span class="comment">// 以下为三重循环</span></span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;<span class="number">5</span>;j++) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (k=<span class="number">1</span>;k&lt;<span class="number">5</span>;k++) <span class="comment">// 确保i、j、k三位互不相同</span></span><br><span class="line">            &#123; </span><br><span class="line">                <span class="keyword">if</span> (i!=k&amp;&amp;i!=j&amp;&amp;j!=k) </span><br><span class="line">                &#123; </span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%d,%d,%d\n&quot;</span>,i,j,k);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h3 id="实例输出"><a href="#实例输出" class="headerlink" title="实例输出"></a>实例输出</h3><p>以上实例输出结果为：</p><pre><code>1,2,31,2,41,3,21,3,41,4,21,4,32,1,32,1,42,3,12,3,42,4,12,4,33,1,23,1,43,2,13,2,43,4,13,4,24,1,24,1,34,2,14,2,34,3,14,3,2</code></pre><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><p>如果取五个不连续的数进行以上排列，如何完成？</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>考虑使用数组使其变为连续的数。</p><h3 id="程序实例-1"><a href="#程序实例-1" class="headerlink" title="程序实例"></a>程序实例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> NUM[<span class="number">5</span>];</span><br><span class="line">    <span class="type">int</span> a, b, c, d, e;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入要操作的五个数字\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d%d&quot;</span>, &amp;NUM[<span class="number">0</span>], &amp;NUM[<span class="number">1</span>], &amp;NUM[<span class="number">2</span>], &amp;NUM[<span class="number">3</span>], &amp;NUM[<span class="number">4</span>]);</span><br><span class="line">    <span class="keyword">for</span> (a = <span class="number">0</span>; a &lt; <span class="number">5</span>; a++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (b = <span class="number">0</span>; b &lt; <span class="number">5</span>; b++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (c = <span class="number">0</span>; c &lt; <span class="number">5</span>; c++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (d = <span class="number">0</span>; d &lt; <span class="number">5</span>; d++) </span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span> (e = <span class="number">0</span>; e &lt; <span class="number">5</span>; e++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (a != b &amp;&amp; b != c &amp;&amp; c != d &amp;&amp; d != e &amp;&amp; a != c &amp;&amp; a != d &amp;&amp; a != e &amp;&amp; b != d &amp;&amp; b != e &amp;&amp; c != d &amp;&amp; c != e &amp;&amp; d != e )</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d %d %d\n&quot;</span>, NUM[a], NUM[b], NUM[c], NUM[d], NUM[e]);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="进阶方向"><a href="#进阶方向" class="headerlink" title="进阶方向"></a>进阶方向</h2><p>考虑采用一种方式简化if语句中去重的步骤以简化。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;有 1、2、3、4 四个数字，能组成多少个互不相同且无重复数字的三位数？都是多少？&lt;/p&gt;
&lt;/blockquot</summary>
      
    
    
    
    <category term="菜鸟教程C语言经典100例练习" scheme="https://gitee.com/cloudstill/cloudstill.git/categories/%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8BC%E8%AF%AD%E8%A8%80%E7%BB%8F%E5%85%B8100%E4%BE%8B%E7%BB%83%E4%B9%A0/"/>
    
    
    <category term="C语言" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="练习" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/%E7%BB%83%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>来自云上的湍流</title>
    <link href="https://gitee.com/cloudstill/cloudstill.git/2022/09/07/%E6%9D%A5%E8%87%AA%E4%BA%91%E4%B8%8A%E7%9A%84%E6%B9%8D%E6%B5%81/"/>
    <id>https://gitee.com/cloudstill/cloudstill.git/2022/09/07/%E6%9D%A5%E8%87%AA%E4%BA%91%E4%B8%8A%E7%9A%84%E6%B9%8D%E6%B5%81/</id>
    <published>2022-09-07T02:13:09.000Z</published>
    <updated>2022-12-15T11:36:57.171Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎来到本blog，很高兴在此与大家相识！<br><img src="test_01.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;欢迎来到本blog，很高兴在此与大家相识！&lt;br&gt;&lt;img src=&quot;test_01.jpg&quot;&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="杂项" scheme="https://gitee.com/cloudstill/cloudstill.git/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
    <category term="杂项" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/%E6%9D%82%E9%A1%B9/"/>
    
  </entry>
  
</feed>
