<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title> 云湍小站 </title>
  
  <subtitle> 来自云上的湍流 </subtitle>
  <link href="https://gitee.com/cloudstill/cloudstill.git/atom.xml" rel="self"/>
  
  <link href="https://gitee.com/cloudstill/cloudstill.git/"/>
  <updated>2022-12-14T05:41:40.034Z</updated>
  <id>https://gitee.com/cloudstill/cloudstill.git/</id>
  
  <author>
    <name>云湍/Cloudstill</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>评教教程</title>
    <link href="https://gitee.com/cloudstill/cloudstill.git/2022/12/14/%E8%AF%84%E6%95%99%E6%95%99%E7%A8%8B/"/>
    <id>https://gitee.com/cloudstill/cloudstill.git/2022/12/14/%E8%AF%84%E6%95%99%E6%95%99%E7%A8%8B/</id>
    <published>2022-12-14T04:23:43.000Z</published>
    <updated>2022-12-14T05:41:40.034Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Edge评教流程"><a href="#Edge评教流程" class="headerlink" title="Edge评教流程"></a>Edge评教流程</h2><p>首先打开网址<a class="link" href="https://webvpn.wbu.edu.cn/">webvpn.wbu.edu.cn<i class="fas fa-external-link-alt"></i></a>，然后不要着急输入账密，按照以下流程操作：<br>1.右上角打开设置,点击默认浏览器：<br><img src="1.png"><br>如果上述没有成功，你也可以这样操作：<br><img src="1.5.png"><br>2.开启允许打开IE兼容模式后，我们还要点击右上角设置把IE兼容模式打开：<br><img src="2.jpg"><br>如果你在第一步中选择了第二种方式，此时你可以：<br><img src="2.5.png"><br>3.完成了上述步骤后就可以输入密码了，后面的步骤非常简单<br><img src="3.png"><br><img src="4.png"><br><img src="5.png"></p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>1.评教时不可以全打一样的分，也就是说最高打93分。<br>2.直接提交后可能会发现还是显示的0分，但是再进去就会发现已经有分了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Edge评教流程&quot;&gt;&lt;a href=&quot;#Edge评教流程&quot; class=&quot;headerlink&quot; title=&quot;Edge评教流程&quot;&gt;&lt;/a&gt;Edge评教流程&lt;/h2&gt;&lt;p&gt;首先打开网址&lt;a class=&quot;link&quot; href=&quot;https://webvpn.wbu</summary>
      
    
    
    
    <category term="教程" scheme="https://gitee.com/cloudstill/cloudstill.git/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="教程" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>C语言综合实训_01</title>
    <link href="https://gitee.com/cloudstill/cloudstill.git/2022/12/14/C%E8%AF%AD%E8%A8%80%E7%BB%BC%E5%90%88%E5%AE%9E%E8%AE%AD-01/"/>
    <id>https://gitee.com/cloudstill/cloudstill.git/2022/12/14/C%E8%AF%AD%E8%A8%80%E7%BB%BC%E5%90%88%E5%AE%9E%E8%AE%AD-01/</id>
    <published>2022-12-14T03:57:51.000Z</published>
    <updated>2022-12-14T04:16:51.869Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>建立员工工资管理系统,主要完成以下功能：<br>1、输入：函数input把10个员工的工号、姓名、入职年份、基础工资、岗位工资、绩效工资、工龄工资以及总工资放在一个结构体数组中，员工的工号、姓名、入职年份、基础工资、岗位工资、绩效工资可由键盘输入也可由文件读取，然后计算出工龄工资和总工资放在结构体对应的域中；其中工龄工资按入职的年限*8（元），总工资就是前面几个分项工资之和。<br>2、插入：insert 函数输入一个员工的记录，按员工的工号先后顺序插入该员工的全部内容到原有的员工信息中。<br>3、排序：sort函数对所有员工按要求排序（1.工号  2.总工资  ），并输出排序后的员工信息。<br>4、查找：find函数输入一个员工的工号或姓名，输出相应的结果。要求能查询多次。<br>5、删除：deletion函数输入一个员工的工号或姓名，输出删除员工的具体信息，及删除后剩余员工的相应的信息。<br>6、输出：函数output 输出当前所有员工的信息。<br>7、在main函数中调用其他函数，实现系统全部功能（注：除了定义结构体外，不允许使用全局变量，函数之间的数据全部使用参数进行传递）。<br>备注：进入系统时首先看到的是一个主要功能选项窗口。</p><h3 id="思路与注意事项"><a href="#思路与注意事项" class="headerlink" title="思路与注意事项"></a>思路与注意事项</h3><p>较为简单，按照步骤来就行，注意一下细节，并且为了方便统计数组长度，引入变量leng（最优解是全局变量，但此处不允许使用，故采用指针作为函数参数传递）</p><h2 id="程序实例"><a href="#程序实例" class="headerlink" title="程序实例"></a>程序实例</h2><p>  #include&lt;stdio.h&gt;<br>  #include&lt;string.h&gt;<br>  struct worker<br>  {<br>    int num;<br>    char name[20];<br>    int year;<br>    int base;<br>    int extra;<br>    int dowell;<br>    int old;<br>    int sum;<br>  }exa[20];<br>  void input(int *leng);<br>  void insert(int *leng);<br>  void sort(int *leng);<br>  void find(int *leng);<br>  void deletion(int *leng);<br>  void output(int *leng);<br>  int main()<br>  {<br>    int flag;<br>    int l;<br>    int *leng;<br>    leng&#x3D;&amp;l;<br>    while(1)<br>    {<br>      printf(“功能菜单\n1.输入 2.插入 3.排序\n4.查找 5.删除 6.输出\n7.退出\n\n”);<br>      printf(“请选择你要进行的功能\n”);<br>      scanf(“%d”,&amp;flag);<br>      printf(“\n”);<br>      switch(flag)<br>      {<br>        case 1:<br>          input(leng);<br>          break;<br>        case 2:<br>          insert(leng);<br>          break;<br>        case 3:<br>          sort(leng);<br>          break;<br>        case 4:<br>          find(leng);<br>          break;<br>        case 5:<br>          deletion(leng);<br>          break;<br>        case 6:<br>          output(leng);<br>          break;<br>        case 7:<br>          break;<br>      }<br>      if(flag&#x3D;&#x3D;7)<br>      {<br>        break;<br>      }<br>    }<br>    return 0;<br>  }<br>  void input(int *leng)<br>  {<br>    int i;<br>    *leng&#x3D;10;<br>    printf(“请输入员工信息\n”);<br>    printf(“工号    姓名 入职年份 基础工资 岗位工资 绩效工资\n”);<br>    for(i&#x3D;0;i&lt;*leng;i++)<br>    {<br>      scanf(“%d %s %d %d %d %d”,&amp;exa[i].num,exa[i].name,&amp;exa[i].year,&amp;exa[i].base,&amp;exa[i].extra,&amp;exa[i].dowell);<br>      exa[i].old&#x3D;8*exa[i].year;<br>      exa[i].sum&#x3D;exa[i].base+exa[i].extra+exa[i].dowell+exa[i].old;<br>    }<br>    printf(“\n”);<br>  }<br>  void insert(int *leng)<br>  {<br>    int i,j;<br>    struct worker mid;<br>    *leng&#x3D;*leng+1;<br>    printf(“请输入员工信息\n”);<br>    printf(“工号    姓名 入职年份 基础工资 岗位工资 绩效工资\n”);<br>    scanf(“%d %s %d %d %d %d”,&amp;exa[*leng].num,exa[*leng].name,&amp;exa[*leng].year,&amp;exa[*leng].base,&amp;exa[*leng].extra,&amp;exa[*leng].dowell);<br>    exa[*leng].old&#x3D;8*exa[*leng].year;<br>    exa[*leng].sum&#x3D;exa[*leng].base+exa[*leng].extra+exa[*leng].dowell+exa[*leng].old;<br>    for(i&#x3D;0;i&lt;*leng;i++)<br>    {<br>      if(exa[*leng].num&gt;exa[i].num&amp;&amp;exa[*leng].num&lt;exa[i+1].num)<br>      {<br>        mid&#x3D;exa[*leng];<br>        for(j&#x3D;*leng-1;j&gt;i;j–)<br>        {<br>          exa[j]&#x3D;exa[j-1];<br>        }<br>        exa[i+1]&#x3D;mid;<br>      }<br>    }<br>    printf(“插入成功\n\n”);<br>  }<br>  void sort(int *leng)<br>  {<br>    int a,i,j;<br>    struct worker mid;<br>    while(1)<br>    {<br>      printf(“请选择排序方式\n1.工号\n2.总工资\n3.退出\n”);<br>      scanf(“%d”,&amp;a);<br>      if(a&#x3D;&#x3D;1)<br>      {<br>        for(i&#x3D;1;i&lt;*leng;i++)<br>        {<br>          for(j&#x3D;0;j&lt;*leng-i;j++)<br>          {<br>            if(exa[j].num&gt;exa[j+1].num)<br>            {<br>              mid&#x3D;exa[j];<br>              exa[j]&#x3D;exa[j+1];<br>              exa[j+1]&#x3D;mid;<br>            }<br>          }<br>        }<br>        output(leng);<br>      }<br>      else if(a&#x3D;&#x3D;2)<br>      {<br>        for(i&#x3D;1;i&lt;*leng;i++)<br>        {<br>          for(j&#x3D;0;j&lt;*leng-i;j++)<br>          {<br>            if(exa[j].sum&gt;exa[j+1].sum)<br>            {<br>              mid&#x3D;exa[j];<br>              exa[j]&#x3D;exa[j+1];<br>              exa[j+1]&#x3D;mid;<br>            }<br>          }<br>        }<br>        output(leng);<br>      }<br>      else if(a&#x3D;&#x3D;3)<br>      {<br>        printf(“\n”);<br>        break;<br>      }<br>    }<br>  }<br>  void find(int *leng)<br>  {<br>    int a,b,c,d,i;<br>    char name_1[20];<br>    while(1)<br>    {<br>      d&#x3D;0;<br>      printf(“请选择查找方式\n1.工号\n2.姓名\n3.退出\n”);<br>      scanf(“%d”,&amp;a);<br>      printf(“\n”);<br>      if(a&#x3D;&#x3D;1)<br>      {<br>        printf(“请输入工号\n”);<br>        scanf(“%d”,&amp;b);<br>        for(i&#x3D;0;i&lt;*leng;i++)<br>        {<br>          if(exa[i].num&#x3D;&#x3D;b)<br>          {<br>            d&#x3D;1;<br>            printf(“工号   姓名   入职年份   基础工资   岗位工资   绩效工资   工龄工资   总工资\n”);<br>            printf(“%-6d %-8s %-4d %10d %10d %10d %10d %10d\n\n”,exa[i].num,exa[i].name,exa[i].year,exa[i].base,exa[i].extra,exa[i].dowell,exa[i].old,exa[i].sum);<br>            break;<br>          }<br>        }<br>        if(d&#x3D;&#x3D;0)<br>        {<br>          printf(“查无此人\n\n”);<br>        }<br>      }<br>      else if(a&#x3D;&#x3D;2)<br>      {<br>        d&#x3D;0;<br>        printf(“请输入姓名\n”);<br>        scanf(“%s”,name_1);<br>        for(i&#x3D;0;i&lt;*leng;i++)<br>        {<br>          if(strcmp(exa[i].name,name_1)&#x3D;&#x3D;0)<br>          {<br>            d&#x3D;1;<br>            printf(“工号   姓名   入职年份   基础工资   岗位工资   绩效工资   工龄工资   总工资\n”);<br>            printf(“%-6d %-8s %-4d %10d %10d %10d %10d %10d\n\n”,exa[i].num,exa[i].name,exa[i].year,exa[i].base,exa[i].extra,exa[i].dowell,exa[i].old,exa[i].sum);<br>            break;<br>          }<br>        }<br>        if(d&#x3D;&#x3D;0)<br>        {<br>          printf(“查无此人\n\n”);<br>        }<br>      }<br>      else if(a&#x3D;&#x3D;3)<br>      {<br>        printf(“\n”);<br>        break;<br>      }<br>    }<br>  }<br>  void deletion(int *leng)<br>  {<br>    int a,b,c,i,j;<br>    char name_2[20];<br>    while(1)<br>    {<br>      c&#x3D;0;<br>      printf(“请选择删除方式\n1.工号\n2.姓名\n3.退出\n”);<br>      scanf(“%d”,&amp;a);<br>      if(a&#x3D;&#x3D;1)<br>      {<br>        printf(“请输入工号\n”);<br>        scanf(“%d”,&amp;b);<br>        for(i&#x3D;0;i&lt;*leng;i++)<br>        {<br>          if(b&#x3D;&#x3D;exa[i].num)<br>          {<br>            c&#x3D;1;<br>            for(j&#x3D;i;j&lt;*leng-1;j++)<br>            {<br>              exa[j]&#x3D;exa[j+1];<br>            }<br>            *leng&#x3D;*leng-1;<br>          }<br>        }<br>        if(c&#x3D;&#x3D;0)<br>        {<br>          printf(“删除失败 请检查工号是否有误\n\n”);<br>        }<br>        else<br>        {<br>          printf(“删除成功\n\n”);<br>        }<br>      }<br>      else if(a&#x3D;&#x3D;2)<br>      {<br>        printf(“请输入姓名\n”);<br>        scanf(“%s”,name_2);<br>        for(i&#x3D;0;i&lt;*leng;i++)<br>        {<br>          if(strcmp(name_2,exa[i].name)&#x3D;&#x3D;0)<br>          {<br>            c&#x3D;1;<br>            for(j&#x3D;i;j&lt;*leng-1;j++)<br>            {<br>              exa[j]&#x3D;exa[j+1];<br>            }<br>            *leng&#x3D;*leng-1;<br>          }<br>        }<br>        if(c&#x3D;&#x3D;0)<br>        {<br>          printf(“删除失败 请检查姓名是否有误\n\n”);<br>        }<br>        else<br>        {<br>          printf(“删除成功\n\n”);<br>        }<br>      }<br>      else if(a&#x3D;&#x3D;3)<br>      {<br>        printf(“\n”);<br>        break;<br>      }<br>    }<br>  }<br>  void output(int *leng)<br>  {<br>    int i;<br>    printf(“工号   姓名   入职年份   基础工资   岗位工资   绩效工资   工龄工资   总工资\n”);<br>    for(i&#x3D;0;i&lt;*leng;i++)<br>    {<br>      printf(“%-6d %-8s %-4d %10d %10d %10d %10d %10d\n”,exa[i].num,exa[i].name,exa[i].year,exa[i].base,exa[i].extra,exa[i].dowell,exa[i].old,exa[i].sum);<br>    }<br>    printf(“\n”);<br>  }</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这项C语言程序实训并不算难，关键要足够细致。本文所给出的实例比较注重格式，自己在写的时候可以调整。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;建立员工工资管理系统,主要完成以下功能：&lt;br&gt;1、输入：函数input把10个员工的工号、姓名、入职年份、基础工资、岗位工资、绩效工资、工</summary>
      
    
    
    
    <category term="C语言综合实训" scheme="https://gitee.com/cloudstill/cloudstill.git/categories/C%E8%AF%AD%E8%A8%80%E7%BB%BC%E5%90%88%E5%AE%9E%E8%AE%AD/"/>
    
    
    <category term="C语言" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="练习" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/%E7%BB%83%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>C语言教程_06：判断语句二三事</title>
    <link href="https://gitee.com/cloudstill/cloudstill.git/2022/12/12/C%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B-06%EF%BC%9A%E5%88%A4%E6%96%AD%E8%AF%AD%E5%8F%A5%E4%BA%8C%E4%B8%89%E4%BA%8B/"/>
    <id>https://gitee.com/cloudstill/cloudstill.git/2022/12/12/C%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B-06%EF%BC%9A%E5%88%A4%E6%96%AD%E8%AF%AD%E5%8F%A5%E4%BA%8C%E4%B8%89%E4%BA%8B/</id>
    <published>2022-12-12T04:09:49.000Z</published>
    <updated>2022-12-12T04:14:48.219Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>数据结构_01：什么是数据结构</title>
    <link href="https://gitee.com/cloudstill/cloudstill.git/2022/12/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84_01%EF%BC%9A%E4%BB%80%E4%B9%88%E6%98%AF%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>https://gitee.com/cloudstill/cloudstill.git/2022/12/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84_01%EF%BC%9A%E4%BB%80%E4%B9%88%E6%98%AF%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id>
    <published>2022-12-12T03:58:19.000Z</published>
    <updated>2022-12-12T04:12:52.666Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>C语言教程_05：输入与输出</title>
    <link href="https://gitee.com/cloudstill/cloudstill.git/2022/10/20/C%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B-05%EF%BC%9A%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/"/>
    <id>https://gitee.com/cloudstill/cloudstill.git/2022/10/20/C%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B-05%EF%BC%9A%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/</id>
    <published>2022-10-20T00:22:48.000Z</published>
    <updated>2022-12-12T04:17:51.662Z</updated>
    
    <content type="html"><![CDATA[<h2 id="C语言中的输入与输出"><a href="#C语言中的输入与输出" class="headerlink" title="C语言中的输入与输出"></a>C语言中的输入与输出</h2><p>在第二节我们曾经介绍“#include&lt;stdio.h&gt;”的含义是包含一个标准输入输出的头文件，随即在第三节我们又学习了printf语句。printf是一个最为常见的输出语句，那么除此之外，C语言中还有那些输入输出语句呢？<br>C语言中有三对输入输出语句，由于格式相似，我们分三对介绍。</p><h2 id="最常用的输入输出语句：scanf-与printf"><a href="#最常用的输入输出语句：scanf-与printf" class="headerlink" title="最常用的输入输出语句：scanf()与printf()"></a>最常用的输入输出语句：scanf()与printf()</h2><p>作为相对应的输入输出字符，scanf与printf在形式上都是由一个英文单词加上format的缩写f构成，其使用起来也遵循类似的规则，使用起来都需要在括号内加入双引号来限定内容，将双引号内的内容原样输入或输出。正如\n这类转义字符具有特殊作用一样，在scanf和printf中还存在着一个特殊的，具有特殊作用而不被原样输出输出的符号，称之为格式字符。</p><h3 id="scanf与printf语句中的格式字符"><a href="#scanf与printf语句中的格式字符" class="headerlink" title="scanf与printf语句中的格式字符"></a>scanf与printf语句中的格式字符</h3><p>在scanf和printf中，形如%d这类%加字母的就被称之为格式字符。<br>格式字符，顾名思义，是来限定输出内容格式的，为了便于学习，我们在此只陈列一些最为常用的格式字符：</p><table>    <thead>        <tr>            <th>格式字符</th>            <th>格式说明</th>        </tr>    </thead>    <tbody>        <tr>            <td>%d</td>            <td>带符号的十进制整数</td>        </tr>        <tr>            <td>%u</td>            <td>无符号的十进制整数</td>        </tr>        <tr>            <td>%c</td>            <td>一个字符</td>        </tr>        <tr>            <td>%s</td>            <td>一个字符串</td>        </tr>        <tr>            <td>%f</td>            <td>浮点数，即小数</td>        </tr>    </tbody></table><p>当我们对输入输出的格式进行限定后， 此时我们会发现少了些什么：我们明确了输出输出的格式，却没有明确我们要格式化的对象，接下来我们就将要学习如何在输入输出语句中确定格式化的对象。</p><h3 id="用逗号间隔开来的补充说明：变量的首次运用"><a href="#用逗号间隔开来的补充说明：变量的首次运用" class="headerlink" title="用逗号间隔开来的补充说明：变量的首次运用"></a>用逗号间隔开来的补充说明：变量的首次运用</h3><p>类似于英语中的同位语，我们可以在括号内、引号后的位置使用逗号，从而确定我们要输入输出的对象。这个对象，可以是变量，也可以是含有变量的表达式。下面我们看一个例子来学习：</p><p>  #include&lt;stdio.h&gt;<br>  int main()<br>  {<br>    int example_1;<br>    float example_2;<br>    scanf(“%d %f”, &amp;example_1, &amp;example_2);<br>    printf(“%d %f”, example_1, example_2);<br>    return 0;<br>  }</p><p><img src="1.png"></p><p>通过这个例子，我们可以总结出3点规律：<br>1.引号内内容应当原样输入输出，包括空格和其他字符；<br>2.引用变量时的格式字符应该与声明时的对应，不一致的格式可能会造成数据丢失或者报错；<br>3.输入语句scanf中引用变量时要用上&amp;，&amp;的名称是取地址符，整个scanf语句的意思就是将输入的值赋给变量所分配的地址，关于地址的更多详情，我们会在指针一节中提及，这里我们可以看做将输入的值赋给&amp;后的变量；</p><h3 id="对格式字符的附加修饰"><a href="#对格式字符的附加修饰" class="headerlink" title="对格式字符的附加修饰"></a>对格式字符的附加修饰</h3><p>在实际运用中，我们可能还要对格式进行进一步要求，这里就引入了对格式字符的附加修饰字符，由于输出输出语句中修饰字符存在细微差别，我们这里分别介绍。<br>在输入语句中我们以整型%d为例，*%d表示数据在输入后不进行赋值，%nd表示将输入数据的前n位赋值，%hd表示输入短整型，%ld表示输入长整型。<br>在输出语句中我们以浮点型%f为例，%lf表示输出双精度double型，%mf表示输出数据最小宽度为m格，%mf表示输出数据最小宽度为m格且少的位置用0补齐，%.nf表示输出数据小数点后有n位，%-f表示输出数据想左靠。</p><h2 id="适用于字符的输入输出语句：getchar-与putchar"><a href="#适用于字符的输入输出语句：getchar-与putchar" class="headerlink" title="适用于字符的输入输出语句：getchar()与putchar()"></a>适用于字符的输入输出语句：getchar()与putchar()</h2><p>对于字符型乃至接下来所说的字符串型，它们也同样遵循上文我们所总结出来的第二条规律，即格式的相统一。<br>而不同它们和第一类相比，也有着许多不同之处，这里我们以输入输出的顺序依次介绍。</p><h3 id="关于getchar"><a href="#关于getchar" class="headerlink" title="关于getchar()"></a>关于getchar()</h3><p>作为简单的输入语句，getchar()在使用时有一下几点需要注意：<br>1.getchar()会接收键盘输入的第一个字符，无论它是符号、数字、字母甚至是空格；<br>2.getchar()的赋值可以直接用等号，例如：变量名 &#x3D; getchar；</p><h3 id="关于putchar"><a href="#关于putchar" class="headerlink" title="关于putchar()"></a>关于putchar()</h3><p>作为简单的输出语句，putchar()在使用时有一下几点需要注意：<br>1.在对字符字符进行原样输出是括号内用的是单引号而非双引号；<br>2.括号内引号中可以是转义字符，例如’\101’就会输出A；<br>3.可以直接在括号内输入变量名来输出它所对应的字符；  </p><h2 id="适用于字符串的输入输出语句：gets-与puts"><a href="#适用于字符串的输入输出语句：gets-与puts" class="headerlink" title="适用于字符串的输入输出语句：gets()与puts()"></a>适用于字符串的输入输出语句：gets()与puts()</h2><p>字符串的输入输出可能会涉及指针等后续内容，本节内容我们将在指针后介绍。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>作为最常用的输入输出语句scanf与printf，学好它们以及配套的格式字符、修饰字符便足以应对大多数环境。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;C语言中的输入与输出&quot;&gt;&lt;a href=&quot;#C语言中的输入与输出&quot; class=&quot;headerlink&quot; title=&quot;C语言中的输入与输出&quot;&gt;&lt;/a&gt;C语言中的输入与输出&lt;/h2&gt;&lt;p&gt;在第二节我们曾经介绍“#include&amp;lt;stdio.h&amp;gt;”的含义</summary>
      
    
    
    
    <category term="C语言教程" scheme="https://gitee.com/cloudstill/cloudstill.git/categories/C%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="C语言" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="教程" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>C语言教程_04：变量与常量</title>
    <link href="https://gitee.com/cloudstill/cloudstill.git/2022/10/19/C%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B-04%EF%BC%9A%E5%8F%98%E9%87%8F%E4%B8%8E%E5%B8%B8%E9%87%8F/"/>
    <id>https://gitee.com/cloudstill/cloudstill.git/2022/10/19/C%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B-04%EF%BC%9A%E5%8F%98%E9%87%8F%E4%B8%8E%E5%B8%B8%E9%87%8F/</id>
    <published>2022-10-19T10:37:08.000Z</published>
    <updated>2022-12-14T04:28:13.961Z</updated>
    
    <content type="html"><![CDATA[<h2 id="生活中变量与常量"><a href="#生活中变量与常量" class="headerlink" title="生活中变量与常量"></a>生活中变量与常量</h2><p>生活中会遇到很多量：一件商品的价格、每个月的生活费……。这些量可以被分为两类：常量和变量。<br>什么是常量？<br>顾名思义，一个常数、一个不变化的量，我们最熟悉的常量就是PAI、自然对数e。<br>什么是变量？<br>同样是顾名思义，一个变化的量就是变量。<br>常量大家都可以理解，可变量未必理解得容易，这里我们以《植物大战僵尸》为例。<br><img src="1.png"><br>在上图中，我们拥有100阳光，而一株豌豆的阳光价格为100。<br>对于阳光，我们所持有的阳光数量会随着我们对阳光的获取和消耗变化，这就是变量。<br>与此同时，豌豆的价格却始终是100，这就是一个常量。</p><h2 id="C语言中的变量与常量"><a href="#C语言中的变量与常量" class="headerlink" title="C语言中的变量与常量"></a>C语言中的变量与常量</h2><p>生活中的变量和常量我们已经了解，那么C语言中的呢？<br>在C语言中，对应一个量而言，我们可以对其进行声明和定义两类操作。任何一个量，它的初始化，也就是声明都是必不可少的。这也就意味着，如果你没有对其进行定义，系统会随机对其定义一个值。<br>一个不变化的变量可以发挥常量的作用，可一个常量却不能随意变化，为了便于学习，我们在本节只介绍变量。</p><h3 id="C语言中变量的声明"><a href="#C语言中变量的声明" class="headerlink" title="C语言中变量的声明"></a>C语言中变量的声明</h3><p>在最开始我们介绍C程序时，我们说过一句话“int被称为关键字，其作用是指定义main函数返回值的类型为int型，int型即整型，暂且可以将其等价于整数”，当时你可能对这句话不太理解，没关系当我们介绍完变量的声明后，你就会明白。<br>首先我们必须要理解为什么要声明变量，在C语言中会有很多字符，如果我们不声明一个字符，我们就无法判定这个字符是一个变量名，更别说它的类型了。<br>敏锐的读者会注意到上述文字中的两个关键点，变量名和变量的类型</p><h3 id="变量名的命名规范与艺术"><a href="#变量名的命名规范与艺术" class="headerlink" title="变量名的命名规范与艺术"></a>变量名的命名规范与艺术</h3><p>如同人有名字一样，每一个变量也有着它的名字，作为程序员的我们，就像变量的父母一样，拥有着给它们取名的权利。同样，正如现实生活中取名字有一定规范一样，我们给变量取名也要遵循一定的规则，具体规则如下：<br>1.变量名的开头必须为字母或下划线，大小写均可；<br>2.变量名中不可以有符号，但是可以有下划线，也就是“_”；<br>3.变量名中允许使用任意的大小写字母以及数字；<br>4.变量名不能与关键字同名；</p><p>如同人有名字一样，变量名也有“好听”与“不好听”的区别。只不过不同于人对名字的要求，变量名遵循一个简单的原则，即“顾名思义”。<br>一个好的变量名应当是简洁明了的，用abcd来表示四个变量这样简单的命名方式固然方便快捷，可在一个有着很多变量的程序中轻易就会被混淆，加之很少有人会有勤写注释的习惯，一个自己写的程序过上几天也会看得一头雾水。<br>而用number_1，number_2来表示两个变量这样的命名方式呢？<br>这样的命名方式确实做到了顾名思义，也值得我们倡导，可在实际编写中，number不如简化成num，num_1,num_2这样的命名方式会更加简明。<br>一个好的C程序并不是说没有bug就可以了，变量名的艺术也值得我们深入研究。</p><p>注：实际操作中变量名的取名要视环境而定，比如那种写一次就行了的比赛题目，随便取个abcd完全可以。</p><h3 id="变量的类型"><a href="#变量的类型" class="headerlink" title="变量的类型"></a>变量的类型</h3><p>在之前我们就说过int作为关键字所声明的是int型，即整型，可视为整数。有短整型就有长整型，有整数就有小数，有整数型就有小数型。只不过在C语言中小数并不称为小数，小数型也不叫小数型，它们分别称为浮点数和浮点型，除此之外还有一种类型为字符型。<br>整数型和字符型可以并为整数类型，它们遵循以下表格中的规律：</p><table>    <thead>        <tr>            <th>类型</th>            <th>存储大小</th>            <th>值范围</th>        </tr>    </thead>    <tbody>        <tr>            <td>char</td>            <td>1 字节</td>            <td>-128 到 127 或 0 到 255</td>        </tr>        <tr>            <td>unsigned char</td>            <td>1 字节</td>            <td>0 到 255</td>        </tr>        <tr>            <td>signed char</td>            <td>1 字节</td>            <td>-128 到 127</td>        </tr>        <tr>            <td>int</td>            <td>2 或 4 字节</td>            <td>-32,768 到 32,767 或 -2,147,483,648 到 2,147,483,647</td>        </tr>        <tr>            <td>unsigned int</td>            <td>2 或 4 字节</td>            <td>0 到 65,535 或 0 到 4,294,967,295</td>        </tr>        <tr>            <td>short</td>            <td>2 字节</td>            <td>-32,768 到 32,767</td>        </tr>        <tr>            <td>unsigned short</td>            <td>2 字节</td>            <td>0 到 65,535</td>        </tr>        <tr>            <td>long</td>            <td>4 字节</td>            <td>-2,147,483,648 到 2,147,483,647</td>        </tr>        <tr>            <td>unsigned long</td>            <td>4 字节</td>            <td>0 到 4,294,967,295</td>        </tr>    </tbody></table><p>注：各种类型的存储大小与系统位数有关，但目前通用的以64位为主。</p><p>而与整数类型相对的浮点类型则遵循以下表格：</p><table>    <thead>        <tr>            <th>类型</th>            <th>存储大小</th>            <th>值范围</th>            <th>精度</th>        </tr>    </thead>    <tbody>        <tr>            <td>float</td>            <td>4 字节</td>            <td>1.2E-38 到 3.4E+38</td>            <th>6 位有效位</th>        </tr>        <tr>            <td>double</td>            <td>8 字节</td>            <td>2.3E-308 到 1.7E+308</td>            <th>15 位有效位</th>        </tr>        <tr>            <td>long double</td>            <td>16 字节</td>            <td>3.4E-4932 到 1.1E+4932</td>            <th>19 位有效位</th>        </tr>    </tbody></table><p>对于这样的表格记忆是很困难的，我们只需要记住一些基础的就可以应对大多数情况了。<br>我们可以先记住char为字符型，int为短整型，如果数据很大就换成long。如果数据为小数就用单精度浮点型float声明，对精度要求很高或是数据过大就用双精度型double。</p><h3 id="C语言中变量的定义"><a href="#C语言中变量的定义" class="headerlink" title="C语言中变量的定义"></a>C语言中变量的定义</h3><p>当我们声明一个变量后，我们需要对它进行赋值，这个过程就称之为定义，变量的定义可以以多个方式进行，这里我们以int为例，有以下情况：<br>1.声明时定义<br>  int example_1 &#x3D; 1；<br>在声明的同时定义，把1的值赋给变量example_1；<br>2.声明后定义<br>  int example_2；<br>  emaxple_2 &#x3D; 2;<br>在声明后定义，将2的值赋给变量example_2;<br>变量的定义相对自由，&#x3D;后面可以跟其他变量和表达式（如 加+ 减- 乘* 除&#x2F; 取余% 所连接的式子）。<br>值得注意的是，在上面我介绍&#x3D;时我所用的是赋值而非相等，这是一个比较严谨的称呼，在C语言中判断是否相等时我们需要用的是&#x3D;&#x3D;；另一个值得注意的点是，当&#x3D;左右数据类型不相等时，会转化成左边变量的数据类型，这也就意味着，将浮点型赋值给整数型时会损失小数点后的内容，将高精度浮点型赋值给低精度浮点型时会损失所相差的那一部分精度。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>Frank曾经说过，变量是玩会的而不是学会的，这也就是为什么我要以《植物大战僵尸》为例的原因。<br>单纯的介绍变量并不能让人完全理解它，在下一节我们将学习C语言中的输入与输出（我们已经学过的printf就是一个输出语句），届时我们就能领会到变量的神奇之处。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;生活中变量与常量&quot;&gt;&lt;a href=&quot;#生活中变量与常量&quot; class=&quot;headerlink&quot; title=&quot;生活中变量与常量&quot;&gt;&lt;/a&gt;生活中变量与常量&lt;/h2&gt;&lt;p&gt;生活中会遇到很多量：一件商品的价格、每个月的生活费……。这些量可以被分为两类：常量和变量。&lt;</summary>
      
    
    
    
    <category term="C语言教程" scheme="https://gitee.com/cloudstill/cloudstill.git/categories/C%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="C语言" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="教程" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>C语言教程_03：printf与转义字符</title>
    <link href="https://gitee.com/cloudstill/cloudstill.git/2022/10/19/C%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B-03%EF%BC%9Aprintf%E4%B8%8E%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6/"/>
    <id>https://gitee.com/cloudstill/cloudstill.git/2022/10/19/C%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B-03%EF%BC%9Aprintf%E4%B8%8E%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6/</id>
    <published>2022-10-19T04:50:15.000Z</published>
    <updated>2022-10-20T00:08:52.136Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于printf"><a href="#关于printf" class="headerlink" title="关于printf"></a>关于printf</h2><p>在上一节中我们以一个程序为例展开我们C语言学习的第一步，这节我们将再次以它为例：</p><p>  #include &lt;stdio.h&gt;</p><pre><code>  int main()  &#123;      /* 我的第一个 C 程序 */      printf(&quot;Hello, World! \n&quot;);        return 0;  &#125;</code></pre><p>在上一节我们介绍C程序结构时，我们并没有探讨printf后面跟的()以及其中的内容。以上述程序为例子：<br>  printf(“Hello, World! \n”);<br>括号所构成的一个整体可以看作printf的一个宾语，相当于语言学中的动宾结构。<br>而括号内的内容我们可以看到是由一对引号包裹在内的，并且当我们实际运行该程序时，这个引号并没有显示出来，而引号内的其他内容（除了\n）都被原样打印了出来。<br>由此我们可以知道printf在打印时，会原样地打印出括号内引号所包裹的大部分内容。<br>那么，为什么\n不会被打印呢？</p><h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><p>转义字符（Escape character），所有的ASCII码都可以用“\”加数字（一般是8进制数字）来表示。而C中定义了一些字母前加”&quot;来表示常见的那些不能显示的ASCII字符，如\0,\t,\n等，就称为转义字符，因为后面的字符，都不是它本来的ASCII字符意思了。<br>关于ASCII码大家可以自行或<a class="link" href="http://c.biancheng.net/c/ascii/">点击此处<i class="fas fa-external-link-alt"></i></a>了解更多。</p><h3 id="关于-n"><a href="#关于-n" class="headerlink" title="关于\n"></a>关于\n</h3><p>在介绍printf时，我们曾疑惑于为何\n不会被打印出来，而在刚刚我们了解到了转义字符，明白了转义字符的意义，同时也知道了转义字符不会被显示出来的机制。<br>那么\n所代表的是什么意思呢？<br>如果你尝试过在我们演示的代码里加入多行printf而不加\n，你会发现这些内容前后连接到了一起；而如果你加入了\n，你会发现它们一行一行分布。<br>由此我们可以知道\n所起到的是换行的作用。<br>那么除了\n，还有哪些转义字符呢？</p><h3 id="转义字符表"><a href="#转义字符表" class="headerlink" title="转义字符表"></a>转义字符表</h3><table>    <thead>        <tr>            <th>转义字符</th>            <th>意义</th>            <th>ASCII码值（十进制）</th>        </tr>    </thead>    <tbody>        <tr>            <td>\a</td>            <td>响铃(BEL)</td>            <td>007</td>        </tr>        <tr>            <td>\b</td>            <td>退格(BS) ，将当前位置移到前一列</td>            <td>008</td>        </tr>        <tr>            <td>\f</td>            <td>换页(FF)，将当前位置移到下页开头</td>            <td>012</td>        </tr>        <tr>            <td>\n</td>            <td>换行(LF) ，将当前位置移到下一行开头</td>            <td>010</td>        </tr>        <tr>            <td>\r</td>            <td>回车(CR) ，将当前位置移到本行开头</td>            <td>013</td>        </tr>        <tr>            <td>\t</td>            <td>水平制表(HT)</td>            <td>009</td>        </tr>        <tr>            <td>\v</td>            <td>垂直制表(VT)</td>            <td>011</td>        </tr>        <tr>            <td>\'</td>            <td>单引号</td>            <td>039</td>        </tr>        <tr>            <td>\"</td>            <td>双引号</td>            <td>034</td>        </tr>        <tr>            <td>\\</td>            <td>反斜杠</td>            <td>092</td>        </tr>    </tbody></table><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>转义字符是C语言中为数不多需要记忆的东西，但我们并不倡导死记硬背，你应当去尝试上述每一个转义字符，在实践中感受它们的作用。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;关于printf&quot;&gt;&lt;a href=&quot;#关于printf&quot; class=&quot;headerlink&quot; title=&quot;关于printf&quot;&gt;&lt;/a&gt;关于printf&lt;/h2&gt;&lt;p&gt;在上一节中我们以一个程序为例展开我们C语言学习的第一步，这节我们将再次以它为例：&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="C语言教程" scheme="https://gitee.com/cloudstill/cloudstill.git/categories/C%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="C语言" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="教程" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode_1_两数之和</title>
    <link href="https://gitee.com/cloudstill/cloudstill.git/2022/10/11/LeetCode-1-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <id>https://gitee.com/cloudstill/cloudstill.git/2022/10/11/LeetCode-1-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</id>
    <published>2022-10-11T15:21:16.000Z</published>
    <updated>2022-10-18T16:29:43.215Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p><p>示例 1：</p><p>输入：nums &#x3D; [2,7,11,15], target &#x3D; 9<br>输出：[0,1]<br>解释：因为 nums[0] + nums[1] &#x3D;&#x3D; 9 ，返回 [0, 1] 。<br>示例 2：</p><p>输入：nums &#x3D; [3,2,4], target &#x3D; 6<br>输出：[1,2]<br>示例 3：</p><p>输入：nums &#x3D; [3,3], target &#x3D; 6<br>输出：[0,1]</p><p>提示：</p><p>2 &lt;&#x3D; nums.length &lt;&#x3D; 104<br>-109 &lt;&#x3D; nums[i] &lt;&#x3D; 109<br>-109 &lt;&#x3D; target &lt;&#x3D; 109<br>只会存在一个有效答案<br>进阶：你可以想出一个时间复杂度小于 O(n2) 的算法吗？</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>太难了，还不会。</p><h3 id="程序实例"><a href="#程序实例" class="headerlink" title="程序实例"></a>程序实例</h3><p>有人相爱，有人夜里开车看海，有人leetcode第一题都做不出来。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数</summary>
      
    
    
    
    <category term="LeetCode" scheme="https://gitee.com/cloudstill/cloudstill.git/categories/LeetCode/"/>
    
    
    <category term="C语言" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="练习" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/%E7%BB%83%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>蓝桥杯_基础练习_Fibonacci数列</title>
    <link href="https://gitee.com/cloudstill/cloudstill.git/2022/10/09/%E8%93%9D%E6%A1%A5%E6%9D%AF-%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0-Fibonacci%E6%95%B0%E5%88%97/"/>
    <id>https://gitee.com/cloudstill/cloudstill.git/2022/10/09/%E8%93%9D%E6%A1%A5%E6%9D%AF-%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0-Fibonacci%E6%95%B0%E5%88%97/</id>
    <published>2022-10-09T11:46:21.000Z</published>
    <updated>2022-10-18T17:29:27.899Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>资源限制<br>内存限制：256.0MB   C&#x2F;C++时间限制：1.0s   Java时间限制：3.0s   Python时间限制：5.0s<br>问题描述<br>Fibonacci数列的递推公式为：Fn&#x3D;Fn-1+Fn-2，其中F1&#x3D;F2&#x3D;1。</p><p>当n比较大时，Fn也非常大，现在我们想知道，Fn除以10007的余数是多少。</p><p>输入格式<br>输入包含一个整数n。<br>输出格式<br>输出一行，包含一个整数，表示Fn除以10007的余数。<br>说明：在本题中，答案是要求Fn除以10007的余数，因此我们只要能算出这个余数即可，而不需要先计算出Fn的准确值，再将计算的结果除以10007取余数，直接计算余数往往比先算出原数再取余简单。</p><p>样例输入<br>10<br>样例输出<br>55<br>样例输入<br>22<br>样例输出<br>7704<br>数据规模与约定<br>1 &lt;&#x3D; n &lt;&#x3D; 1,000,000。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>通过循环遍历每一个数直到求出结果。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>由于C语言中对于局部变量和全局变量分配的内存不同，在本例中使用局部变量可能会导致栈内存溢出从而报错，关于该问题你可以点击此处了解更多。<br>同时，将取余符号放在循环中也是为了避免溢出问题。</p><h3 id="程序实例"><a href="#程序实例" class="headerlink" title="程序实例"></a>程序实例</h3><p>由于一些无法避免的原因，我将代码放到评论中。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;资源限制&lt;br&gt;内存限制：256.0MB   C&amp;#x2F;C++时间限制：1.0s   Java时间限制：3.0s   Python时间限</summary>
      
    
    
    
    <category term="蓝桥杯" scheme="https://gitee.com/cloudstill/cloudstill.git/categories/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
    
    <category term="C语言" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="练习" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/%E7%BB%83%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>蓝桥杯_基础练习_圆的面积</title>
    <link href="https://gitee.com/cloudstill/cloudstill.git/2022/10/09/%E8%93%9D%E6%A1%A5%E6%9D%AF-%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0-%E5%9C%86%E7%9A%84%E9%9D%A2%E7%A7%AF/"/>
    <id>https://gitee.com/cloudstill/cloudstill.git/2022/10/09/%E8%93%9D%E6%A1%A5%E6%9D%AF-%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0-%E5%9C%86%E7%9A%84%E9%9D%A2%E7%A7%AF/</id>
    <published>2022-10-09T08:46:16.000Z</published>
    <updated>2022-10-09T08:48:27.568Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>源限制<br>内存限制：256.0MB   C&#x2F;C++时间限制：1.0s   Java时间限制：3.0s   Python时间限制：5.0s<br>问题描述<br>给定圆的半径r，求圆的面积。<br>输入格式<br>输入包含一个整数r，表示圆的半径。<br>输出格式<br>输出一行，包含一个实数，四舍五入保留小数点后7位，表示圆的面积。<br>说明：在本题中，输入是一个整数，但是输出是一个实数。</p><p>对于实数输出的问题，请一定看清楚实数输出的要求，比如本题中要求保留小数点后7位，则你的程序必须严格的输出7位小数，输出过多或者过少的小数位数都是不行的，都会被认为错误。</p><p>实数输出的问题如果没有特别说明，舍入都是按四舍五入进行。</p><p>样例输入<br>4<br>样例输出<br>50.2654825<br>数据规模与约定<br>1 &lt;&#x3D; r &lt;&#x3D; 10000。<br>提示<br>本题对精度要求较高，请注意π的值应该取较精确的值。你可以使用常量来表示π，比如PI&#x3D;3.14159265358979323，也可以使用数学公式来求π，比如PI&#x3D;atan(1.0)*4。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>简单运算，注意数据类型。</p><h3 id="程序实例"><a href="#程序实例" class="headerlink" title="程序实例"></a>程序实例</h3><pre><code>#include&lt;stdio.h&gt;#define PI 3.14159265358979323int main()&#123;    int r;    double c;    scanf_s(&quot;%d&quot;, &amp;r);    c = (double)r * r * PI;    printf(&quot;%0.7lf\n&quot;, c + 0.00000005);    return 0;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;源限制&lt;br&gt;内存限制：256.0MB   C&amp;#x2F;C++时间限制：1.0s   Java时间限制：3.0s   Python时间限制</summary>
      
    
    
    
    <category term="蓝桥杯" scheme="https://gitee.com/cloudstill/cloudstill.git/categories/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
    
    <category term="C语言" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="练习" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/%E7%BB%83%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>蓝桥杯_基础练习_序列求和</title>
    <link href="https://gitee.com/cloudstill/cloudstill.git/2022/10/09/%E8%93%9D%E6%A1%A5%E6%9D%AF-%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0-%E5%BA%8F%E5%88%97%E6%B1%82%E5%92%8C/"/>
    <id>https://gitee.com/cloudstill/cloudstill.git/2022/10/09/%E8%93%9D%E6%A1%A5%E6%9D%AF-%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0-%E5%BA%8F%E5%88%97%E6%B1%82%E5%92%8C/</id>
    <published>2022-10-09T08:19:06.000Z</published>
    <updated>2022-10-09T08:30:46.612Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>资源限制<br>内存限制：256.0MB   C&#x2F;C++时间限制：1.0s   Java时间限制：3.0s   Python时间限制：5.0s<br>问题描述<br>求1+2+3+…+n的值。<br>输入格式<br>输入包括一个整数n。<br>输出格式<br>输出一行，包括一个整数，表示1+2+3+…+n的值。<br>样例输入<br>4<br>样例输出<br>10<br>样例输入<br>100<br>说明：有一些试题会给出多组样例输入输出以帮助你更好的做题。</p><p>一般在提交之前所有这些样例都需要测试通过才行，但这不代表这几组样例数据都正确了你的程序就是完全正确的，潜在的错误可能仍然导致你的得分较低。</p><p>样例输出<br>5050<br>数据规模与约定<br>1 &lt;&#x3D; n &lt;&#x3D; 1,000,000,000。<br>说明：请注意这里的数据规模。</p><p>本题直接的想法是直接使用一个循环来累加，然而，当数据规模很大时，这种“暴力”的方法往往会导致超时。此时你需要想想其他方法。你可以试一试，如果使用1000000000作为你的程序的输入，你的程序是不是能在规定的上面规定的时限内运行出来。</p><p>本题另一个要值得注意的地方是答案的大小不在你的语言默认的整型(int)范围内，如果使用整型来保存结果，会导致结果错误。</p><p>如果你使用C++或C语言而且准备使用printf输出结果，则你的格式字符串应该写成%I64d以输出long long类型的整数。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>可以使用for循环从1累加到n，但这种方法较为笨拙，故思考采用高斯方法求数列和。</p><h3 id="程序实例"><a href="#程序实例" class="headerlink" title="程序实例"></a>程序实例</h3><pre><code>#include&lt;stdio.h&gt;int main()&#123;    long long n, m;    scanf_s(&quot;%I64d&quot;, &amp;n);    m = (1 + n) * n / 2;    printf(&quot;%I64d\n&quot;, m);    return 0;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;资源限制&lt;br&gt;内存限制：256.0MB   C&amp;#x2F;C++时间限制：1.0s   Java时间限制：3.0s   Python时间限</summary>
      
    
    
    
    <category term="蓝桥杯" scheme="https://gitee.com/cloudstill/cloudstill.git/categories/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
    
    <category term="C语言" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="练习" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/%E7%BB%83%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>蓝桥杯_基础练习_数列排序</title>
    <link href="https://gitee.com/cloudstill/cloudstill.git/2022/10/07/%E8%93%9D%E6%A1%A5%E6%9D%AF-%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0-%E6%95%B0%E5%88%97%E6%8E%92%E5%BA%8F/"/>
    <id>https://gitee.com/cloudstill/cloudstill.git/2022/10/07/%E8%93%9D%E6%A1%A5%E6%9D%AF-%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0-%E6%95%B0%E5%88%97%E6%8E%92%E5%BA%8F/</id>
    <published>2022-10-06T16:25:54.000Z</published>
    <updated>2022-10-07T06:13:20.117Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>资源限制<br>内存限制：512.0MB   C&#x2F;C++时间限制：1.0s   Java时间限制：3.0s   Python时间限制：5.0s<br>问题描述<br>　　给定一个长度为n的数列，将这个数列按从小到大的顺序排列。1&lt;&#x3D;n&lt;&#x3D;200<br>输入格式<br>　　第一行为一个整数n。<br>　　第二行包含n个整数，为待排序的数，每个整数的绝对值小于10000。<br>输出格式<br>　　输出一行，按从小到大的顺序输出排序后的数列。<br>样例输入<br>5<br>8 3 6 4 9<br>样例输出<br>3 4 6 8 9</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>将数列放入数组中，将其依次进行两两比较并移动，保证较小的数永远位于较大的数右边，当遍历整个数组后即可输出合规的结果。为了简化程序，考虑引入函数来执行两两比较并移动的操作，此处需要注意的是局部变量和全局变量的关系，考虑引入指针来解决此问题。</p><h3 id="程序实例"><a href="#程序实例" class="headerlink" title="程序实例"></a>程序实例</h3><pre><code>#include&lt;stdio.h&gt;int main()&#123;    int n,m;    int a, b, c;    int NUM[200];    scanf_s(&quot;%d&quot;, &amp;n);    for (m = 0; m &lt; n; m++)    &#123;        scanf_s(&quot;%d&quot;, &amp;NUM[m]);    &#125;    for (a = 0; a &lt; n; a++)     &#123;        for (b = 0; b &lt; n; b++)        &#123;            if (a &lt; b)            &#123;                swap(&amp;NUM[a], &amp;NUM[b]);            &#125;        &#125;    &#125;    for (c = 0; c &lt; n; c++)     &#123;        printf(&quot;%d &quot;, NUM[c]);    &#125;    return 0;&#125;int swap(int* num1, int* num2)&#123;    int i;    if ( *num1 &gt; *num2 )    &#123;        i = *num2;        *num2 = *num1;        *num1 = i;    &#125;    return 0;&#125;</code></pre><h3 id="实例输出"><a href="#实例输出" class="headerlink" title="实例输出"></a>实例输出</h3><p><img src="1.png"></p><h2 id="进阶方向"><a href="#进阶方向" class="headerlink" title="进阶方向"></a>进阶方向</h2><p>考虑简化。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;资源限制&lt;br&gt;内存限制：512.0MB   C&amp;#x2F;C++时间限制：1.0s   Java时间限制：3.0s   Python时间限</summary>
      
    
    
    
    <category term="蓝桥杯" scheme="https://gitee.com/cloudstill/cloudstill.git/categories/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
    
    <category term="C语言" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="练习" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/%E7%BB%83%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>菜鸟教程C语言经典100例_02</title>
    <link href="https://gitee.com/cloudstill/cloudstill.git/2022/10/07/%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8BC%E8%AF%AD%E8%A8%80%E7%BB%8F%E5%85%B8100%E4%BE%8B_02/"/>
    <id>https://gitee.com/cloudstill/cloudstill.git/2022/10/07/%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8BC%E8%AF%AD%E8%A8%80%E7%BB%8F%E5%85%B8100%E4%BE%8B_02/</id>
    <published>2022-10-06T16:13:13.000Z</published>
    <updated>2022-10-07T02:36:03.832Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>企业发放的奖金根据利润提成。<br>利润(I)低于或等于10万元时，奖金可提10%；<br>利润高于10万元，低于20万元时，低于10万元的部分按10%提成，高于10万元的部分，可提成7.5%；<br>20万到40万之间时，高于20万元的部分，可提成5%；<br>40万到60万之间时高于40万元的部分，可提成3%；<br>60万到100万之间时，高于60万元的部分，可提成1.5%；<br>高于100万元时，超过100万元的部分按1%提成。<br>从键盘输入当月利润I，求应发放奖金总数？</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>通过判定利润i的大小对其进行分段计算。</p><h3 id="程序实例"><a href="#程序实例" class="headerlink" title="程序实例"></a>程序实例</h3><pre><code>#include&lt;stdio.h&gt;int main()&#123;    double i,j;    double i_1, i_2, i_3, i_4, i_5;    printf(&quot;请输入利润\n&quot;);    scanf_s(&quot;%d&quot;, &amp;i);    i_1 = 100000 * 0.10;    i_2 = i_1 + 100000 * 0.075;    i_3 = i_1 + i_2 + 200000 * 0.05;    i_4 = i_1 + i_2 + i_3 + 200000 * 0.03;    i_5 = i_1 + i_2 + i_3 + i_4 + 400000 * 0.01;    if (i &lt;= 100000)     &#123;        j = i * 0.10;    &#125;    else if (i&lt;=200000)    &#123;        j = i_1 + (i - 100000) * 0.075;    &#125;    else if (i &lt;= 400000)    &#123;        j = i_2 + (i - 200000) * 0.05;    &#125;    else if (i &lt;= 600000)    &#123;        j = i_3 + (i - 400000) * 0.03;    &#125;    else if (i &lt;= 1000000)    &#123;        j = i_4 + (i - 600000) * 0.015;    &#125;    else if (i &gt; 1000000)    &#123;        j = i_5 + (i - 1000000) * 0.01;    &#125;    printf(&quot;提成为：%lf&quot;, j);    return 0;&#125;</code></pre><h2 id="进阶方向"><a href="#进阶方向" class="headerlink" title="进阶方向"></a>进阶方向</h2><p>简化程序。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;企业发放的奖金根据利润提成。&lt;br&gt;利润(I)低于或等于10万元时，奖金可提10%；&lt;br&gt;利润高于10万元，低于20万元时，低于10万元的</summary>
      
    
    
    
    <category term="菜鸟教程C语言经典100例练习" scheme="https://gitee.com/cloudstill/cloudstill.git/categories/%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8BC%E8%AF%AD%E8%A8%80%E7%BB%8F%E5%85%B8100%E4%BE%8B%E7%BB%83%E4%B9%A0/"/>
    
    
    <category term="C语言" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="练习" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/%E7%BB%83%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>C语言教程_02：一个简单的C程序</title>
    <link href="https://gitee.com/cloudstill/cloudstill.git/2022/10/06/C%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B-02%EF%BC%9A%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84C%E7%A8%8B%E5%BA%8F/"/>
    <id>https://gitee.com/cloudstill/cloudstill.git/2022/10/06/C%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B-02%EF%BC%9A%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84C%E7%A8%8B%E5%BA%8F/</id>
    <published>2022-10-06T12:20:11.000Z</published>
    <updated>2022-10-19T04:56:50.355Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一个简单的C程序"><a href="#一个简单的C程序" class="headerlink" title="一个简单的C程序"></a>一个简单的C程序</h2><p>在接触C语言之前，大家或多或少会对C语言产生敬畏之心，认为它是一门很高深的语言，实则不然，且看代码：</p><pre><code>#include &lt;stdio.h&gt;int main()&#123;    /* 我的第一个 C 程序 */    printf(&quot;Hello, World! \n&quot;);    return 0;&#125;// 注：以//打头的某一行或者用/**/括起来的数行在程序中统称为注释，不会被编译器所编译// 一个好的注释对于程序而言是很重要的，它不仅可以让别人看懂你的代码，也可以便于自我的纠察</code></pre><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="02.jpg"></p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>观察这个程序代码，大家会发现它非常的简单，然而，作为一个程序它却相当完整。<br>我们可以简单将其分为三个部分，一是由#include打头的部分，二是int main()，三则是{}内的内容，这三个部分的存在，也就构成了一个完整的C程序<br>接下来将对这三个部分进行逐一分析。</p><p>#include &lt;stdio.h&gt;<br>#号所起的是一个标识的作用，是一个规范，可以看作无实际意义。include在英文中有包含的意思。stdio.h可以分为四个部分解读，std是standard的缩写，standard意为标准；i是input的缩写，input意为输入；o是output的缩写，output意为输出；h是head的缩写，head意为头，而.h顾名思义则是头文件的后缀。将这样一段代码逐字分析后拼接在一起，清晰指向了一个信息“这个程序可能包含一个标准输入输出的头文件”。</p><p>int main()<br>int被称为关键字，其作用是指定义main函数返回值的类型为int型，int型即整型，暂且可以将其等价于整数。在程序中这一部分称为函数头。main函数作为C程序中至关重要的部分，在每一个C程序中都会有一个main函数，作为一个程序的入口部分，也就是说程序都是从main函数头开始执行，然后进入到main函数中，执行其中语句的。()内的内容是我们可以填充的，初学C程序，可以暂且不管。</p><p>{}可以起到一个囊括的作用，其内部作为一个整体，称之为函数体。printf作为其中的一部分，我们将其成为执行语句，其中print的意思为打印或者输出，而f是format的缩写，意为格式化，故printf的意思就是格式化输出。这里我们提到一个词输出，正是我们之前所提到了的“标准输入输出”中的“输出”。<br>return 0并不属于执行语句，我们将其称之为return语句。return的作用是向程序返回一个值，在这里就是0，而0又恰好是一个整数，符合int类型。</p><p>值得一提的是，C程序是严格区分中英文的，一切语句都要用英文进行书写，且在函数体内部的内容，执行语句和return语句末尾，都要加上；表示一条语句的结束，这也就意味着，C程序在编译时会跳过空格以及空行（和注释）直接跳到下一条语句。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对这样一个代码进行逐字分析后，相信大家对于C程序的概念有了一个具体的认知，并且，对于C语言不再过于恐惧。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一个简单的C程序&quot;&gt;&lt;a href=&quot;#一个简单的C程序&quot; class=&quot;headerlink&quot; title=&quot;一个简单的C程序&quot;&gt;&lt;/a&gt;一个简单的C程序&lt;/h2&gt;&lt;p&gt;在接触C语言之前，大家或多或少会对C语言产生敬畏之心，认为它是一门很高深的语言，实则不然，且</summary>
      
    
    
    
    <category term="C语言教程" scheme="https://gitee.com/cloudstill/cloudstill.git/categories/C%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="C语言" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="教程" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>C语言教程_01：编译环境</title>
    <link href="https://gitee.com/cloudstill/cloudstill.git/2022/10/06/C%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B-01%EF%BC%9A%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83/"/>
    <id>https://gitee.com/cloudstill/cloudstill.git/2022/10/06/C%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B-01%EF%BC%9A%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83/</id>
    <published>2022-10-06T11:59:16.000Z</published>
    <updated>2022-11-09T06:46:13.613Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>学习C语言，一个好用的编译器必不可少。<br>目前各大高校大多采用的是VC++6.0作为编译环境，众所周知，这款编译器由微软于1993年推出，其年龄相较于我而言也要大上10岁。<br>计算机学科本身就是一门走在时代前沿需要创新的学科，一款落后于时代的编译器，即使它十分经典，在笔者看来，也是可以被优化的。</p><h2 id="Visual-Studio-2022"><a href="#Visual-Studio-2022" class="headerlink" title="Visual Studio 2022"></a>Visual Studio 2022</h2><p>本教程选用Visual Studio 2022作为编译环境，其原因有以下几点，一是由于它够新，对于新手学习C语言而言其相对比较友好，一旦体验过Visual Studio 2022和其他编译器，如上文所提及的VC++6.0，你就明显感觉到它的好用；二则是你可以在Visual Studio官网免费下载到Visual Studio Community 2022。<br>你可以通过搜索引擎搜索Visual Studio 2022到官网下载，你也可以<a class="link" href="https://visualstudio.microsoft.com/zh-hans/vs/">点击此处<i class="fas fa-external-link-alt"></i></a>进行下载。</p><h3 id="Visual-Studio-2022使用教学"><a href="#Visual-Studio-2022使用教学" class="headerlink" title="Visual Studio 2022使用教学"></a>Visual Studio 2022使用教学</h3><p>关于Visual Studio 2022的使用教学，受限于文字形式，无法具体地和大家展开，这里推荐B站的一位up主，同时也是我C语言的启蒙老师：<a class="link" href="https://space.bilibili.com/19658621">Micro_Frank<i class="fas fa-external-link-alt"></i></a><br>你也可以在B站搜索由他创作的 vs2022(Visual Studio 2022)权威指南&amp;&amp;C语言&amp;&amp;软件工程开发的方向&amp;&amp;技巧要领<br>你可以<a class="link" href="https://www.bilibili.com/video/BV1Xt411g7jT/">点击此处<i class="fas fa-external-link-alt"></i></a>直接观看教程</p><h3 id="Visual-Studio-2022无法下载"><a href="#Visual-Studio-2022无法下载" class="headerlink" title="Visual Studio 2022无法下载"></a>Visual Studio 2022无法下载</h3><p>目前从官网下载Visual Studio 2022时可能会存在下载进度静止不动的问题，这里提供一种<a class="link" href="https://blog.csdn.net/weixin_66712181/article/details/122719473">解决方案<i class="fas fa-external-link-alt"></i></a></p><h2 id="Dev-C"><a href="#Dev-C" class="headerlink" title="Dev-C++"></a>Dev-C++</h2><p>此外你也可以选用Dev-C++作为你的编译环境，Dev-C++作为一款较为简单的编译器，是许多比赛项目的指定的编译器之一。<br>同样你可以<a class="link" href="https://sourceforge.net/projects/orwelldevcpp/">点击此处<i class="fas fa-external-link-alt"></i></a>下载。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;学习C语言，一个好用的编译器必不可少。&lt;br&gt;目前各大高校大多采用的是VC++6.0作为编译环境，众所周知，这款编译器由微软于1993年推出</summary>
      
    
    
    
    <category term="C语言教程" scheme="https://gitee.com/cloudstill/cloudstill.git/categories/C%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="C语言" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="教程" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>菜鸟教程C语言经典100例_01</title>
    <link href="https://gitee.com/cloudstill/cloudstill.git/2022/10/06/%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8BC%E8%AF%AD%E8%A8%80%E7%BB%8F%E5%85%B8100%E4%BE%8B-01/"/>
    <id>https://gitee.com/cloudstill/cloudstill.git/2022/10/06/%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8BC%E8%AF%AD%E8%A8%80%E7%BB%8F%E5%85%B8100%E4%BE%8B-01/</id>
    <published>2022-10-06T05:11:20.000Z</published>
    <updated>2022-10-06T13:45:11.549Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>有 1、2、3、4 四个数字，能组成多少个互不相同且无重复数字的三位数？都是多少？</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>可填在百位、十位、个位的数字都是 1、2、3、4，组成所有的排列后再去掉不满足条件的排列。</p><h3 id="程序实例"><a href="#程序实例" class="headerlink" title="程序实例"></a>程序实例</h3><pre><code>#include&lt;stdio.h&gt;int main()&#123;    int i,j,k;    printf(&quot;\n&quot;);    for(i=1;i&lt;5;i++) &#123; // 以下为三重循环        for(j=1;j&lt;5;j++) &#123;            for (k=1;k&lt;5;k++) &#123; // 确保i、j、k三位互不相同                if (i!=k&amp;&amp;i!=j&amp;&amp;j!=k) &#123;                     printf(&quot;%d,%d,%d\n&quot;,i,j,k);                &#125;            &#125;        &#125;    &#125;    return 0;&#125;</code></pre><h3 id="实例输出"><a href="#实例输出" class="headerlink" title="实例输出"></a>实例输出</h3><p>以上实例输出结果为：</p><pre><code>1,2,31,2,41,3,21,3,41,4,21,4,32,1,32,1,42,3,12,3,42,4,12,4,33,1,23,1,43,2,13,2,43,4,13,4,24,1,24,1,34,2,14,2,34,3,14,3,2</code></pre><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><p>如果取五个不连续的数进行以上排列，如何完成？</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>考虑使用数组使其变为连续的数。</p><h3 id="程序实例-1"><a href="#程序实例-1" class="headerlink" title="程序实例"></a>程序实例</h3><pre><code>#include&lt;stdio.h&gt;int main()&#123;    int NUM[5];    int a, b, c, d, e;    printf(&quot;输入要操作的五个数字\n&quot;);    scanf_s(&quot;%d%d%d%d%d&quot;, &amp;NUM[0], &amp;NUM[1], &amp;NUM[2], &amp;NUM[3], &amp;NUM[4]);    for (a = 0; a &lt; 5; a++)            &#123;                for (b = 0; b &lt; 5; b++)                &#123;                    for (c = 0; c &lt; 5; c++)                    &#123;                        for (d = 0; d &lt; 5; d++)                         &#123;                            for (e = 0; e &lt; 5; e++)                            &#123;                                if (a != b &amp;&amp; b != c &amp;&amp; c != d &amp;&amp; d != e &amp;&amp; a != c &amp;&amp; a != d &amp;&amp; a != e &amp;&amp; b != d &amp;&amp; b != e &amp;&amp; c != d &amp;&amp; c != e &amp;&amp; d != e )                                &#123;                                    printf(&quot;%d %d %d %d %d\n&quot;, NUM[a], NUM[b], NUM[c], NUM[d], NUM[e]);                                &#125;                            &#125;                        &#125;                    &#125;                &#125;            &#125;            return 0;&#125;</code></pre><h2 id="进阶方向"><a href="#进阶方向" class="headerlink" title="进阶方向"></a>进阶方向</h2><p>考虑采用一种方式简化if语句中去重的步骤以简化。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;有 1、2、3、4 四个数字，能组成多少个互不相同且无重复数字的三位数？都是多少？&lt;/p&gt;
&lt;h3 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路</summary>
      
    
    
    
    <category term="菜鸟教程C语言经典100例练习" scheme="https://gitee.com/cloudstill/cloudstill.git/categories/%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8BC%E8%AF%AD%E8%A8%80%E7%BB%8F%E5%85%B8100%E4%BE%8B%E7%BB%83%E4%B9%A0/"/>
    
    
    <category term="C语言" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="练习" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/%E7%BB%83%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>来自云上的湍流</title>
    <link href="https://gitee.com/cloudstill/cloudstill.git/2022/09/07/%E6%9D%A5%E8%87%AA%E4%BA%91%E4%B8%8A%E7%9A%84%E6%B9%8D%E6%B5%81/"/>
    <id>https://gitee.com/cloudstill/cloudstill.git/2022/09/07/%E6%9D%A5%E8%87%AA%E4%BA%91%E4%B8%8A%E7%9A%84%E6%B9%8D%E6%B5%81/</id>
    <published>2022-09-07T02:13:09.000Z</published>
    <updated>2022-10-06T13:45:18.833Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎来到本blog，很高兴在此与大家相识！<br><img src="test_01.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;欢迎来到本blog，很高兴在此与大家相识！&lt;br&gt;&lt;img src=&quot;test_01.jpg&quot;&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="杂项" scheme="https://gitee.com/cloudstill/cloudstill.git/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
    <category term="杂项" scheme="https://gitee.com/cloudstill/cloudstill.git/tags/%E6%9D%82%E9%A1%B9/"/>
    
  </entry>
  
</feed>
