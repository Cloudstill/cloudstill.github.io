[{"title":"C语言教程_02：一个简单的C程序","url":"/2022/10/06/C%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B-02%EF%BC%9A%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84C%E7%A8%8B%E5%BA%8F/","content":"一个简单的C程序在接触C语言之前，大家或多或少会对C语言产生敬畏之心，认为它是一门很高深的语言，实则不然，且看代码：\n#include &lt;stdio.h&gt;int main()&#123;    /* 我的第一个 C 程序 */     printf(&quot;Hello, World! \\n&quot;);    return 0;&#125;// 注：以//打头的某一行或者用/**/括起来的数行在程序中统称为注释，不会被编译器所编译// 一个好的注释对于程序而言是很重要的，它不仅可以让别人看懂你的代码，也可以便于自我的纠察\n\n运行结果\n代码分析观察这个程序代码，大家会发现它非常的简单，然而，作为一个程序它却相当完整。我们可以简单将其分为三个部分，一是由#include打头的部分，二是int main()，三则是{}内的内容，这三个部分的存在，也就构成了一个完整的C程序接下来将对这三个部分进行逐一分析。\n#include &lt;stdio.h&gt; \n#号所起的是一个标识的作用，是一个规范，可以看作无实际意义。include在英文中有包含的意思。stdio.h可以分为四个部分解读，std是standard的缩写，standard意为标准；i是input的缩写，input意为输入；o是output的缩写，output意为输出；h是head的缩写，head意为头，而.h顾名思义则是头文件的后缀。将这样一段代码逐字分析后拼接在一起，清晰指向了一个信息“这个程序可能包含一个标准输入输出的头文件”。\nint main()\nint被称为关键字，其作用是指定义main函数返回值的类型为int型，int型即整型，暂且可以将其等价于整数。在程序中这一部分称为函数头。main函数作为C程序中至关重要的部分，在每一个C程序中都会有一个main函数，作为一个程序的入口部分，也就是说程序都是从main函数头开始执行，然后进入到main函数中，执行其中语句的。()内的内容是我们可以填充的，初学C程序，可以暂且不管。\n&#123;    ......&#125;\n{}可以起到一个囊括的作用，其内部作为一个整体，称之为函数体。printf作为其中的一部分，我们将其成为执行语句，其中print的意思为打印或者输出，而f是format的缩写，意为格式化，故printf的意思就是格式化输出。这里我们提到一个词输出，正是我们之前所提到了的“标准输入输出”中的“输出”。\nreturn 0;\nreturn 0并不属于执行语句，我们将其称之为return语句。return的作用是向程序返回一个值，在这里就是0，而0又恰好是一个整数，符合int类型。值得一提的是，C程序是严格区分中英文的，一切语句都要用英文进行书写，且在函数体内部的内容，执行语句和return语句末尾，都要加上；表示一条语句的结束，这也就意味着，C程序在编译时会跳过空格以及空行（和注释）直接跳到下一条语句。\n总结对这样一个代码进行逐字分析后，相信大家对于C程序的概念有了一个具体的认知，并且，对于C语言不再过于恐惧。\n","categories":["C语言教程"],"tags":["C语言","教程"]},{"title":"C语言教程_01：编译环境","url":"/2022/10/06/C%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B-01%EF%BC%9A%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83/","content":"前言学习C语言，一个好用的ide必不可少。目前各大高校大多采用的是VC++6.0作为编译环境，众所周知，这款ide由微软于1993年推出，其年龄相较于我而言也要大上10岁。计算机学科本身就是一门走在时代前沿需要创新的学科，一款落后于时代的ide，即使它十分经典，在笔者看来，也是可以被优化的。\nVisual Studio 2022本教程推荐Visual Studio 2022作为编译环境，其原因有以下几点，一是由于它够新，对于新手学习C语言而言其相对比较友好，一旦体验过Visual Studio 2022和其他ide，如上文所提及的VC++6.0，你就明显感觉到它的好用；二则是你可以在Visual Studio官网免费下载到Visual Studio Community 2022。你可以通过搜索引擎搜索Visual Studio 2022到官网下载，你也可以点击此处进行下载。\nVisual Studio 2022使用教学关于Visual Studio 2022的使用教学，受限于文字形式，无法具体地和大家展开，这里推荐B站的一位up主，同时也是我C语言的启蒙老师：Micro_Frank你也可以在B站搜索由他创作的 vs2022(Visual Studio 2022)权威指南&amp;&amp;C语言&amp;&amp;软件工程开发的方向&amp;&amp;技巧要领你可以点击此处直接观看教程\nVisual Studio 2022无法下载目前从官网下载Visual Studio 2022时可能会存在下载进度静止不动的问题，这里提供一种解决方案\nDev-C++此外你也可以选用Dev-C++作为你的编译环境，Dev-C++作为一款较为简单的ide，是许多比赛项目的指定的ide之一。出于此，本教程选用Dev作为编译环境。同样你可以点击此处下载。\nCLionCLion作为JetBrains开发的一款ide，我们耳熟能详的PyCharm和IntelliJ同时也出自其旗下，官方正版的CLion并不免费，你可以点击此处下载。\nVisual Studio CodeVS Code作为微软公司开发的另一款ide，经调试可以支持多种语言，同时具有轻量化的优点，你可以点击此处下载。\n","categories":["C语言教程"],"tags":["C语言","教程"]},{"title":"C语言教程_03：printf与转义字符","url":"/2022/10/19/C%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B-03%EF%BC%9Aprintf%E4%B8%8E%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6/","content":"关于printf在上一节中我们以一个程序为例展开我们C语言学习的第一步，这节我们将再次以它为例：\n#include &lt;stdio.h&gt;int main()&#123;    /* 我的第一个 C 程序 */    printf(&quot;Hello, World! \\n&quot;);    return 0;&#125;\n在上一节我们介绍C程序结构时，我们并没有探讨printf后面跟的()以及其中的内容。以上述程序为例子：\nprintf(&quot;Hello, World! \\n&quot;);\n括号所构成的一个整体可以看作printf的一个宾语，相当于语言学中的动宾结构。而括号内的内容我们可以看到是由一对引号包裹在内的，并且当我们实际运行该程序时，这个引号并没有显示出来，而引号内的其他内容（除了\\n）都被原样打印了出来。由此我们可以知道printf在打印时，会原样地打印出括号内引号所包裹的大部分内容。那么，为什么\\n不会被打印呢？\n转义字符转义字符（Escape character），所有的ASCII码都可以用“\\”加数字（一般是8进制数字）来表示。而C中定义了一些字母前加”&quot;来表示常见的那些不能显示的ASCII字符，如\\0,\\t,\\n等，就称为转义字符，因为后面的字符，都不是它本来的ASCII字符意思了。关于ASCII码大家可以自行或点击此处了解更多。\n关于\\n在介绍printf时，我们曾疑惑于为何\\n不会被打印出来，而在刚刚我们了解到了转义字符，明白了转义字符的意义，同时也知道了转义字符不会被显示出来的机制。那么\\n所代表的是什么意思呢？如果你尝试过在我们演示的代码里加入多行printf而不加\\n，你会发现这些内容前后连接到了一起；而如果你加入了\\n，你会发现它们一行一行分布。由此我们可以知道\\n所起到的是换行的作用。那么除了\\n，还有哪些转义字符呢？\n转义字符表\n\n\n转义字符\n意义\nASCII码值（十进制）\n\n\n\n\\a\n响铃(BEL)\n007\n\n\n\\b\n退格(BS) ，将当前位置移到前一列\n008\n\n\n\\f\n换页(FF)，将当前位置移到下页开头\n012\n\n\n\\n\n换行(LF) ，将当前位置移到下一行开头\n010\n\n\n\\r\n回车(CR) ，将当前位置移到本行开头\n013\n\n\n\\t\n水平制表(HT)\n009\n\n\n\\v\n垂直制表(VT)\n011\n\n\n\\‘\n单引号\n039\n\n\n\\“\n双引号\n034\n\n\n\\\\\n反斜杠\n092\n\n\n结语转义字符是C语言中为数不多需要记忆的东西，但我们并不倡导死记硬背，你应当去尝试上述每一个转义字符，在实践中感受它们的作用。\n","categories":["C语言教程"],"tags":["C语言","教程"]},{"title":"C语言教程_05：输入与输出","url":"/2022/10/20/C%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B-05%EF%BC%9A%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/","content":"C语言中的输入与输出在第二节我们曾经介绍“#include&lt;stdio.h&gt;”的含义是包含一个标准输入输出的头文件，随即在第三节我们又学习了printf语句。printf是一个最为常见的输出语句，那么除此之外，C语言中还有那些输入输出语句呢？C语言中有三对输入输出语句，由于格式相似，我们分三对介绍。\n最常用的输入输出语句：scanf()与printf()作为相对应的输入输出字符，scanf与printf在形式上都是由一个英文单词加上format的缩写f构成，其使用起来也遵循类似的规则，使用起来都需要在括号内加入双引号来限定内容，将双引号内的内容原样输入或输出。正如\\n这类转义字符具有特殊作用一样，在scanf和printf中还存在着一个特殊的，具有特殊作用而不被原样输出输出的符号，称之为格式字符。\nscanf与printf语句中的格式字符在scanf和printf中，形如%d这类%加字母的就被称之为格式字符。格式字符，顾名思义，是来限定输出内容格式的，为了便于学习，我们在此只陈列一些最为常用的格式字符：\n\n\n\n格式字符\n格式说明\n\n\n\n%d\n带符号的十进制整数\n\n\n%u\n无符号的十进制整数\n\n\n%c\n一个字符\n\n\n%s\n一个字符串\n\n\n%f\n浮点数，即小数\n\n\n当我们对输入输出的格式进行限定后， 此时我们会发现少了些什么：我们明确了输出输出的格式，却没有明确我们要格式化的对象，接下来我们就将要学习如何在输入输出语句中确定格式化的对象。\n用逗号间隔开来的补充说明：变量的首次运用类似于英语中的同位语，我们可以在括号内、引号后的位置使用逗号，从而确定我们要输入输出的对象。这个对象，可以是变量，也可以是含有变量的表达式。下面我们看一个例子来学习：\n#include&lt;stdio.h&gt;int main()&#123;    int example_1;    float example_2;    scanf(&quot;%d %f&quot;, &amp;example_1, &amp;example_2);    printf(&quot;%d %f&quot;, example_1, example_2);    return 0;&#125;\n\n\n通过这个例子，我们可以总结出3点规律：1.引号内内容应当原样输入输出，包括空格和其他字符；2.引用变量时的格式字符应该与声明时的对应，不一致的格式可能会造成数据丢失或者报错；3.输入语句scanf中引用变量时要用上&amp;，&amp;的名称是取地址符，整个scanf语句的意思就是将输入的值赋给变量所分配的地址，关于地址的更多详情，我们会在指针一节中提及，这里我们可以看做将输入的值赋给&amp;后的变量；\n对格式字符的附加修饰在实际运用中，我们可能还要对格式进行进一步要求，这里就引入了对格式字符的附加修饰字符，由于输出输出语句中修饰字符存在细微差别，我们这里分别介绍。在输入语句中我们以整型%d为例，*%d表示数据在输入后不进行赋值，%nd表示将输入数据的前n位赋值，%hd表示输入短整型，%ld表示输入长整型。在输出语句中我们以浮点型%f为例，%lf表示输出双精度double型，%mf表示输出数据最小宽度为m格，%mf表示输出数据最小宽度为m格且少的位置用0补齐，%.nf表示输出数据小数点后有n位，%-f表示输出数据想左靠。\n适用于字符的输入输出语句：getchar()与putchar()对于字符型乃至接下来所说的字符串型，它们也同样遵循上文我们所总结出来的第二条规律，即格式的相统一。而不同它们和第一类相比，也有着许多不同之处，这里我们以输入输出的顺序依次介绍。\n关于getchar()作为简单的输入语句，getchar()在使用时有一下几点需要注意：1.getchar()会接收键盘输入的第一个字符，无论它是符号、数字、字母甚至是空格；2.getchar()的赋值可以直接用等号，例如：变量名 &#x3D; getchar；\n关于putchar()作为简单的输出语句，putchar()在使用时有一下几点需要注意：1.在对字符字符进行原样输出是括号内用的是单引号而非双引号；2.括号内引号中可以是转义字符，例如’\\101’就会输出A；3.可以直接在括号内输入变量名来输出它所对应的字符；  \n适用于字符串的输入输出语句：gets()与puts()字符串的输入输出可能会涉及指针等后续内容，本节内容我们将在指针后介绍。\n结语作为最常用的输入输出语句scanf与printf，学好它们以及配套的格式字符、修饰字符便足以应对大多数环境。\n","categories":["C语言教程"],"tags":["C语言","教程"]},{"title":"C语言教程_06：判断语句二三事","url":"/2022/12/12/C%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B-06%EF%BC%9A%E5%88%A4%E6%96%AD%E8%AF%AD%E5%8F%A5%E4%BA%8C%E4%B8%89%E4%BA%8B/","content":"不为谁而作的歌当我写下这段文字时。距离上一次更新本教程已经过去了快两个月。两个月的时间，我的心态也发生了很大的变化，再一次更新，更多的不再是为了谁谁。\nif语句if相信大家都不陌生，在英文中它有着“如果”的意思，它引导的条件状语从句可以翻译为“如果……就……”，而在C语言中，它也有着相同的用法，且看下面的例子：\nif(......)&#123;  ......&#125;\n套用英语中的逻辑来理解这个例子，把它翻译成中文就是“如果小括号里面的内容成立，那么花括号里面的内容也成立”。小括号里面可以填什么呢？数字，变量，表达式，关系式都可以。对于数字和变量，在计算机中，无论它们的值是多少，都只有0和非0的区别，非0又可以理解为1。我们都知道在计算机中0表示假，1表示真。即小括号里的数字和变量如果为0，语句不成立，为1（非0）则成立。对于表达式，程序会先将其进行运算之后，再对其数值进行如对数字和变量相同的操作。对于关系式，它们同样遵循01原则，当关系式成立时它们相当于1，当关系式不成立时它们相当于0。说完小括号我们再来说说花括号，花括号里填写的是函数语句，函数语句的成立意味着执行，这也就是说，一旦小括号里的值为1，那么就会执行花括号里的内容。\n","categories":["C语言教程"],"tags":["C语言","教程"]},{"title":"C语言教程_04：变量与常量","url":"/2022/10/19/C%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B-04%EF%BC%9A%E5%8F%98%E9%87%8F%E4%B8%8E%E5%B8%B8%E9%87%8F/","content":"生活中变量与常量生活中会遇到很多量：一件商品的价格、每个月的生活费……。这些量可以被分为两类：常量和变量。什么是常量？顾名思义，一个常数、一个不变化的量，我们最熟悉的常量就是PAI、自然对数e。什么是变量？同样是顾名思义，一个变化的量就是变量。常量大家都可以理解，可变量未必理解得容易，这里我们以《植物大战僵尸》为例。在上图中，我们拥有100阳光，而一株豌豆的阳光价格为100。对于阳光，我们所持有的阳光数量会随着我们对阳光的获取和消耗变化，这就是变量。与此同时，豌豆的价格却始终是100，这就是一个常量。\nC语言中的变量与常量生活中的变量和常量我们已经了解，那么C语言中的呢？在C语言中，对应一个量而言，我们可以对其进行声明和定义两类操作。任何一个量，它的初始化，也就是声明都是必不可少的。这也就意味着，如果你没有对其进行定义，系统会随机对其定义一个值。一个不变化的变量可以发挥常量的作用，可一个常量却不能随意变化，为了便于学习，我们在本节只介绍变量。\nC语言中变量的声明在最开始我们介绍C程序时，我们说过一句话“int被称为关键字，其作用是指定义main函数返回值的类型为int型，int型即整型，暂且可以将其等价于整数”，当时你可能对这句话不太理解，没关系当我们介绍完变量的声明后，你就会明白。首先我们必须要理解为什么要声明变量，在C语言中会有很多字符，如果我们不声明一个字符，我们就无法判定这个字符是一个变量名，更别说它的类型了。敏锐的读者会注意到上述文字中的两个关键点，变量名和变量的类型\n变量名的命名规范与艺术如同人有名字一样，每一个变量也有着它的名字，作为程序员的我们，就像变量的父母一样，拥有着给它们取名的权利。同样，正如现实生活中取名字有一定规范一样，我们给变量取名也要遵循一定的规则，具体规则如下：1.变量名的开头必须为字母或下划线，大小写均可；2.变量名中不可以有符号，但是可以有下划线，也就是“_”；3.变量名中允许使用任意的大小写字母以及数字；4.变量名不能与关键字同名；\n如同人有名字一样，变量名也有“好听”与“不好听”的区别。只不过不同于人对名字的要求，变量名遵循一个简单的原则，即“顾名思义”。一个好的变量名应当是简洁明了的，用abcd来表示四个变量这样简单的命名方式固然方便快捷，可在一个有着很多变量的程序中轻易就会被混淆，加之很少有人会有勤写注释的习惯，一个自己写的程序过上几天也会看得一头雾水。而用number_1，number_2来表示两个变量这样的命名方式呢？这样的命名方式确实做到了顾名思义，也值得我们倡导，可在实际编写中，number不如简化成num，num_1,num_2这样的命名方式会更加简明。一个好的C程序并不是说没有bug就可以了，变量名的艺术也值得我们深入研究。\n注：实际操作中变量名的取名要视环境而定，比如那种写一次就行了的比赛题目，随便取个abcd完全可以。\n变量的类型在之前我们就说过int作为关键字所声明的是int型，即整型，可视为整数。有短整型就有长整型，有整数就有小数，有整数型就有小数型。只不过在C语言中小数并不称为小数，小数型也不叫小数型，它们分别称为浮点数和浮点型，除此之外还有一种类型为字符型。整数型和字符型可以并为整数类型，它们遵循以下表格中的规律：\n\n\n\n类型\n存储大小\n值范围\n\n\n\nchar\n1 字节\n-128 到 127 或 0 到 255\n\n\nunsigned char\n1 字节\n0 到 255\n\n\nsigned char\n1 字节\n-128 到 127\n\n\nint\n2 或 4 字节\n-32,768 到 32,767 或 -2,147,483,648 到 2,147,483,647\n\n\nunsigned int\n2 或 4 字节\n0 到 65,535 或 0 到 4,294,967,295\n\n\nshort\n2 字节\n0 到 65,535\n\n\nunsigned short\n2 字节\n1.2E-38 到 3.4E+38\n\n\nlong\n4 字节\n-2,147,483,648 到 2,147,483,647\n\n\nunsigned long\n4 字节\n0 到 4,294,967,295\n\n\n注：各种类型的存储大小与系统位数有关，但目前通用的以64位为主。\n而与整数类型相对的浮点类型则遵循以下表格：\n\n\n\n类型\n存储大小\n值范围\n精度\n\n\n\nfloat\n4 字节\n1.2E-38 到 3.4E+38\n6 位有效位\n\n\ndouble\n8 字节\n2.3E-308 到 1.7E+308\n15 位有效位\n\n\nlong double\n16 字节\n3.4E-4932 到 1.1E+4932\n19 位有效位\n\n\n对于这样的表格记忆是很困难的，我们只需要记住一些基础的就可以应对大多数情况了。我们可以先记住char为字符型，int为短整型，如果数据很大就换成long。如果数据为小数就用单精度浮点型float声明，对精度要求很高或是数据过大就用双精度型double。\nC语言中变量的定义当我们声明一个变量后，我们需要对它进行赋值，这个过程就称之为定义，变量的定义可以以多个方式进行，这里我们以int为例，有以下情况：1.声明时定义\nint example_1 = 1；在声明的同时定义，把1的值赋给变量example_1.\n2.声明后定义\nint example_2；emaxple_2 = 2;\n在声明后定义，将2的值赋给变量example_2.变量的定义相对自由，&#x3D;后面可以跟其他变量和表达式（如 加+ 减- 乘* 除&#x2F; 取余% 所连接的式子）。值得注意的是，在上面我介绍&#x3D;时我所用的是赋值而非相等，这是一个比较严谨的称呼，在C语言中判断是否相等时我们需要用的是&#x3D;&#x3D;；另一个值得注意的点是，当&#x3D;左右数据类型不相等时，会转化成左边变量的数据类型，这也就意味着，将浮点型赋值给整数型时会损失小数点后的内容，将高精度浮点型赋值给低精度浮点型时会损失所相差的那一部分精度。\n结语Frank曾经说过，变量是玩会的而不是学会的，这也就是为什么我要以《植物大战僵尸》为例的原因。单纯的介绍变量并不能让人完全理解它，在下一节我们将学习C语言中的输入与输出（我们已经学过的printf就是一个输出语句），届时我们就能领会到变量的神奇之处。\n","categories":["C语言教程"],"tags":["C语言","教程"]},{"title":"备战蓝桥杯_算法_01：递归","url":"/2022/12/16/%E5%A4%87%E6%88%98%E8%93%9D%E6%A1%A5%E6%9D%AF-%E7%AE%97%E6%B3%95-01%EF%BC%9A%E9%80%92%E5%BD%92/","content":"前言已经数不清这是开的第几个坑了，蓝桥杯虽然含金量不高，但是对于我这样的初学者而言确是一次很好的历练机会，为了记录我备赛的过程，特此开了这个坑。声明：本系列源于CSDN博主Androids_lost_Sheep的博文《蓝桥杯知识点汇总：基础知识和常用算法》，博主所采用的编程语言为Java，本系列将采用C语言作为编程语言。\n什么是递归递归的含义很好理解，就是一个函数调用自身，难就难在如何确定一个题目的递归式，这就需要多刷题了。一个完整的递归函数包含两个部分:1.递归式2.递归出口以斐波那契数列为例：\nint f(int n)&#123;\tif(n == 1 || n == 2)    return 1; // 递归出口\treturn f(n-1) + f(n-2); // 递归式&#125;\n递归式用来递归计算我们想要得到的值， 递归出口用来结束递归。如果没有递归出口，那么就会一直递归下去，就造成了死循环。那么什么题会用到递归呢？子问题和原问题求解方式完全相同的，可以用递归。\n一个递归的例子题目：计算n阶行列式给定一个N×N的矩阵A，求|A|。输入格式：第一行一个正整数N。 接下来N行，每行N个整数，第i行第j个数字表示A[i][j]。输出格式：一行，输出|A|。\n思路：寻找递归在通过递归解决问题时，我们往往只需要关注n到n-1步的变化规律，然后将其不断重复到跳出条件即可。对于本题而言，计算行列式的一个通法是拉普拉斯展开，故我们要考虑n阶行列式到n-1阶行列式的变化过程。\n代码示例#include &lt;stdio.h&gt;#include &lt;math.h&gt;#define MAX 100int DET(int num_1[MAX][MAX], int n);int Minor(int num_1[MAX][MAX], int i, int n);int main() &#123;\tint num_1[MAX][MAX];\tint i,j,n;\tscanf(&quot;%d&quot;,&amp;n);\tfor(i=0;i&lt;n;i++)\t&#123;\t\tfor(j=0;j&lt;n;j++)\t\t&#123;\t\t\tscanf(&quot;%d&quot;,&amp;num_1[i][j]);\t\t&#125;\t&#125;\tprintf(&quot;%d&quot;,DET(num_1,n));\treturn 0;&#125;int DET(int num_1[MAX][MAX],int n)&#123;\tint i,M,sum=0;\tif(n==1)\t&#123;\t\treturn num_1[0][0];\t&#125;\telse if(n&gt;1)\t&#123;\t\tfor(i=0;i&lt;n;i++)\t\t&#123;\t\t\tM=Minor(num_1,i,n);\t\t\tsum=sum+pow(-1,i+2)*num_1[0][i]*M;\t\t&#125;\t&#125;\treturn sum;&#125;int Minor(int num_1[MAX][MAX],int i,int n)&#123;\tint j,k,result;\tint num_2[MAX][MAX];\tfor(j=0;j&lt;n-1;j++)\t&#123;\t\tfor(k=0;k&lt;n-1;k++)\t\t&#123;\t\t\tif(k&lt;i)\t\t\t&#123;\t\t\t\tnum_2[j][k]=num_1[j+1][k];\t\t\t\t\t\t\t\t\t\t\t\t&#125;\t\t\telse if(k&gt;=i)\t\t\t&#123;\t\t\t\tnum_2[j][k]=num_1[j+1][k+1];\t\t\t&#125;\t\t&#125;\t&#125;\treturn DET(num_2,n-1);&#125;\n\n递归练习递归实现指数型枚举题目从 1∼n 这 n 个整数中随机选取任意多个，输出所有可能的选择方案。\n输入格式输入一个整数 n。\n输出格式每行输出一种方案。\n同一行内的数必须升序排列，相邻两个数用恰好 1 个空格隔开。\n对于没有选任何数的方案，输出空行。\n本题有自定义校验器（SPJ），各行（不同方案）之间的顺序任意。\n数据范围1≤n≤15输入样例：3输出样例：\n322 311 31 21 2 3\n思路","categories":["蓝桥杯"],"tags":["C语言","教程","练习"]},{"title":"LeetCode_1_两数之和","url":"/2022/10/11/LeetCode-1-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/","content":"题目给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。\n你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。\n你可以按任意顺序返回答案。\n示例 1：\n输入：nums &#x3D; [2,7,11,15], target &#x3D; 9输出：[0,1]解释：因为 nums[0] + nums[1] &#x3D;&#x3D; 9 ，返回 [0, 1] 。示例 2：\n输入：nums &#x3D; [3,2,4], target &#x3D; 6输出：[1,2]示例 3：\n输入：nums &#x3D; [3,3], target &#x3D; 6输出：[0,1]\n提示：\n2 &lt;&#x3D; nums.length &lt;&#x3D; 104-109 &lt;&#x3D; nums[i] &lt;&#x3D; 109-109 &lt;&#x3D; target &lt;&#x3D; 109只会存在一个有效答案进阶：你可以想出一个时间复杂度小于 O(n2) 的算法吗？\n思路太难了，还不会。\n程序实例有人相爱，有人夜里开车看海，有人leetcode第一题都做不出来。\n","categories":["LeetCode"],"tags":["C语言","练习"]},{"title":"数据结构_03：链表的设计与实现","url":"/2023/01/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-03%EF%BC%9A%E9%93%BE%E8%A1%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/","content":"链表定义结构体初始化插入删除查找长度查找元素查找索引打印顺序表与链表的区别如果我们深入思考了上一节中讲的顺序表，我们会发现它在一定程度上和数组十分相似，并且它在存储时也是一段连续的内存，而本节所讲的链表是不连续存储的。在我们日常生活中，有时会遇到顺序表和链表如何抉择的问题。一个数据结构往往要实现增删查改四个功能。其实，当我们仔细比较其优缺点后，我们很容易发现顺序表在查改方面存在优势，而链表在增删方面存在优势。这也就意味着，当我们实际使用时，可以根据所用的次数来决定如何选择。\n总结链表作为一个经典的数据结构，在学习上会存在着一定的难度。但是，有了前面顺序表的基础，再加上认真钻研，实际理解起来还是很简单的。值得注意的是，数据结构并不是一门基于某某语言的课程，实际上，我们可以用任何语言来写数据结构。同时，即便是同种语言下的数据结构，在实现起来也会存在代码的不同，本教程仅仅提供一种解决方案。我们在学习时，一定不要局限于形式上的不同，关键要领略其核心思想，勤于思考才能事半功倍。\n附代码","categories":["数据结构"],"tags":["C语言","教程","数据结构"]},{"title":"数据结构_02：顺序表的设计与实现","url":"/2023/01/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-02%EF%BC%9A%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/","content":"数组和表的区别在开启本教程学习之前，相信大家已经有了一定语言基础，对于数组，大家一定十分熟悉。我们在使用数组时，或多或少会遇到以下几个问题：1.必须在一开始就声明数组的长度；2.无法随时随用地对数组进行扩容，这就导致了一开始声明的数组的长度必须足够大；3.可能会存在未使用的数组，这对内存是一种浪费。而表，就是一种可以解决这些问题的数据结构。关于数组和表，更多的区别需要可能会涉及一些更加深层的知识，这里不做赘述，欢迎自己探知。\n顺序表按照惯例，我们一般需要对顺序表进行一定的介绍：顺序表是用一段物理地址连续的存储单元依次存储数据元素的线性结构，一般情况下采用数组存储。在数组上完成数据的增删查改。为了方便理解，我们可以简单地认为他是一种可以动态变化的连续存储的数组。\n定义结构体顺序表的实现有很多方式，其中，我们采取结构体的方式。首先我们需要定义一个结构体：\nstruct list&#123;  int* array;  int capacity;  int size;&#125;;\n在这段代码中，我们定义了一个叫list的结构体，它包含了三个成员，整型指针变量array，整型变量capacity和整型变量size。和它们的名字一样，array表示顺序表所占的内存空间，capacity表示顺序表的理论最大容量，size表示顺序表中已经填满的容量，即实际长度。\n初始化当我们定义完结构体后，我们还没有真正创建一个顺序表，即便我们在main函数中创建了一个结构体变量，它也不能真正算得上一个顺序表。一个顺序表的实现必须要对其进行初始化，为了便于多次使用，我们采取自定义一个初始化函数的方式实现。在此之前，为了便于后续操作，我们可以使用typedef函数将结构体指针struct list*重命名为arraylist，即：\ntypedef struct list* arraylist;\n此后涉及struct list*的内容我们一律用arraylist代替，请根据需求自行代换。根据我们此前定义的结构体的三个成员内存array，容量capacity，长度size，我们可以设想到初始化需要进行的操作。我们都知道计算机在存储数据时需要用到内存空间，所以我们在初始化时，需要使用malloc函数申请一块内存空间，使用此函数前我们需要引入新的头文件&lt;stdlib.h&gt;，即：\n#include&lt;stdlib.h&gt;\n接着，我们需要用变量表示顺序表初始的最大容量和实际长度。综上，初始化一个顺序表需要实现以下三个功能：1.向计算机申请一块内存空间；2.表示顺序表初始最大容量；3.表示顺序表初始实际长度，即0；实现这三个功能并不难，即：\nvoid setuplist(arraylist list)&#123;  list-&gt;capacity=1;//此处初始化顺序表容量为1，实际可更改  list-&gt;array=malloc(sizeof(int)*list-&gt;capacity);  list-&gt;size=0;&#125;\n观察上述代码块，有几点值得我们注意：1.在学习函数章节时，我们已经知道了函数传值和传地址的区别，此处由于我们需要对顺序表地址进行操作，故需要用到结构体指针；2.表示结构体指针的成员需要用到-&gt;符号，或者也可以用(*指针名).成员名表示；3.sizeof()函数会根据括号内的数据类型换算成对应的内存大小；当我们深入了解malloc函数后，我们会知道有时malloc函数也会申请内存失败，此时它会返回NULL，同时申请失败也就意味着初始化失败，我们可以采取一种方式来表示初始化的成功与否。我们可以用布尔型返回true和false来表示初始化的结果，但是我们都知道true&#x3D;1，false&#x3D;0，又因为C语言中可能存在没有布尔型的情况，此处我们仅仅展示一个在部分C语言标准下存在的代码块，后续涉及判断内容我们一律采用int型，代码块即：\n...#include&lt;stdbool.h&gt;..._Bool test_1=true;bool test_2=false;...\n对于增加判断申请内存失败与否的初始化函数，即：\nint setuplist(arraylist list)&#123;  list-&gt;capacity=1;  list-&gt;array=malloc(sizeof(int)*list-&gt;capacity);  if(list-&gt;array==NULL)    return 0;  list-&gt;size=0;  return 1;&#125;\n至此，我们已经实现了顺序表的初始化功能。\n扩容当我们初始化一个顺序表后，有时我们会面临最大容量不足的情况，当然我们一开始初始化的可以很容易的保证最大容量足够第一次使用，可是当我们后续使用时，有时要对其进行扩容。在C语言中本身提供了realloc函数重新申请一块内存，和malloc一样，它也是包含于&lt;stdlib.h&gt;头文件中的，扩容的操作极其简单，即：\nint extendlist(arraylist list)&#123;  int newcapacity=list-&gt;capacity*2;//内存扩展两倍  int* newarray=realloc(list-&gt;array, sizeof(int)*newcapacity);  if(newarray==NULL)    return 0;  list-&gt;array=newarray;  list-&gt;capacity=newcapacity;  return 1;&#125;\n\n插入一个顺序表被创建出来后，其中并没有元素，这时我们可以对其进行插入。和插入数组一样，我们顺序表的插入也需要三个要素：1.被插入的顺序表；2.插入的数字；3.插入的位置。基于此，我们很容易就可以设计出一个插入顺序表的函数，在我们正式开始进行写代码前，我们可以很容易的预见一些插入过程中可能会发生的问题：1.插入的位置在可插入的位置之外；2.顺序表容积已满，需要扩容；3.如何选择插入的方法。关于第一个问题，我们一般认为顺序表从的位置从1开始，那么当我们插入的位置小于1或很大时，这个插入是不可取的；关于第二个问题，我们只需要在插入过程中引入if判断是否需要扩容即可；关于第三个问题，我们可以很容易想到，我们只需要将顺序表的元素从尾部开始依次向后移动一位直到空出需要插入的位置，再将需要插入的元素插入需要插入的位置即可。综上，我们可以很容易写出代码，即：\nint insertlist(arraylist list, int element, int index)&#123;  if(index&lt;1||index&gt;list-&gt;size+1)    return 0;  if(list-&gt;size==list-&gt;capacity)    extendlist(arraylist list);  int i;  for(i=list-&gt;size; i&gt;index-1; i--)    list-&gt;array[i]=list-&gt;array[i-1];  list-&gt;array[index-1]=element;  list-&gt;size++;  return 1;&#125;\n\n删除当我们学会了插入后，再学习删除是非常简单的，我们只需要根据位置信息，就可以将顺序表中的某个元素删除，值得注意是，输入的位置信息也需要在合法的范围内，代码即：\nint deletelist(arraylist list, int index)&#123;  if(index&lt;1||index&gt;list-&gt;size)    return 0;  int i;  for(i=index-1; i&lt;list-&gt;size; i++)    list-&gt;array[i]=list-&gt;array[i+1];  list-&gt;size--;  return 1;&#125;\n\n查找长度查找长度相当简单，我们只需要向主程序返回size值即可，即：\nint sizelist(array list)&#123;  return list-&gt;size;&#125;\n\n查找元素查找元素也同样简单，我们可以选择多种查找方式，这里我们采用简单的遍历查找，即：\nint findlist(arraylist list, int element)&#123;  int i;  for(i=0; i&lt;list-&gt;size; i++)    if(list-&gt;array[i]==element)      return i+1;//数组从0开始，顺序表从1开始，故i+1  return 0;&#125;\n\n查找索引查找索引即查找某个位置上对应元素的值，有了上述模块的经验，我们很容易设计出一个功能齐全的函数，即：\nint* getlist(arraylist list, int index)&#123;  if(index&lt;1||index&gt;list-&gt;size)    return NULL;  return &amp;list-&gt;array[index-1];//注意数组索引和顺序表索引的区别&#125;\n\n打印打印顺序表索引元素的函数也同样简单，即：\nvoid printlist(arraylist list)&#123;  int i;  for(i=0; i&lt;list-&gt;size; i++)    printf(&quot;%d &quot;,list-&gt;array[i]);  printf(&quot;\\n&quot;);&#125;\n\n销毁当我们使用完顺序表后，有时候需要销毁它释放内存，此时我们可以用free函数来进行操作，free函数必须与malloc函数配套使用，即：\nint destorylist(arraylist list)&#123;  if(list-&gt;array==NULL)    return 0;  free(list-&gt;array);  list-&gt;array=NULL;  list-capacity=0;  list-&gt;size=0;  return 1;&#125;\n\n总结顺序表作为数据结构的第一节，并不算难，我们关键是要从中领会思想，学习一些函数的用法，为接下来链表的学习打好基础。\n附代码全代码如下：\n#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;struct list&#123;  int* array;  int capacity;  int size;&#125;;typedef struct list* arraylist;int setuplist(arraylist list)&#123;  list-&gt;capacity=1;  list-&gt;array=malloc(sizeof(int)*list-&gt;capacity);  if(list-&gt;array==NULL)    return 0;  list-&gt;size=0;  return 1;&#125;int extendlist(arraylist list)&#123;  int newcapacity=list-&gt;capacity*2;//内存扩展两倍  int* newarray=realloc(list-&gt;array, sizeof(int)*newcapacity);  if(newarray==NULL)    return 0;  list-&gt;array=newarray;  list-&gt;capacity=newcapacity;  return 1;&#125;int insertlist(arraylist list, int element, int index)&#123;  if(index&lt;1||index&gt;list-&gt;size+1)    return 0;  if(list-&gt;size==list-&gt;capacity)    extendlist(arraylist);  int i;  for(i=list-&gt;size;i&gt;index-1;--i)    list-&gt;array[i]=list-&gt;array[i-1];  list-&gt;array[index-1]=element;  list-&gt;size++;  return 1;&#125;int deletelist(arraylist list, int index)&#123;  if(index&lt;1||index&gt;list-&gt;size)    return 0;  int i;  for(i=index-1; i&lt;list-&gt;size; i++)    list-&gt;array[i]=list-&gt;array[i+1];  list-&gt;size--;  return 0;&#125;int sizelist(arraylist list)&#123;  return list-&gt;size;&#125;int findlist(arraylist list, int element)&#123;  int i;  for(i=0; i&lt;list-&gt;size; i++)    if(list-&gt;array[i]==element)      return i+1;  return 0;&#125;int* getlist(arraylist list, int index)&#123;  if(index&lt;1||index&gt;list-&gt;size)    return NULL;  return &amp;list-&gt;array[index-1];&#125;void printlist(arraylist list)&#123;  int i;  for(i=0; i&lt;list-&gt;size; i++)    printf(&quot;%d &quot;,list-&gt;array[i]);  printf(&quot;\\n&quot;);&#125;int destorylist(arraylist list)&#123;  if(list-&gt;array==NULL)    return 0;  free(list-&gt;array);  list-&gt;array=NULL;  list-capacity=0;  list-&gt;size=0;  return 1;&#125;int main()&#123;...&#125;","categories":["数据结构"],"tags":["C语言","教程","数据结构"]},{"title":"数据结构_01：什么是数据结构","url":"/2022/12/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84_01%EF%BC%9A%E4%BB%80%E4%B9%88%E6%98%AF%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/","content":"什么是数据结构一般来说，用计算机解决一个具体问题时，大致需要经过下列几个步骤：首先要从具体问题抽象出一个适当的数学模型，然后设计一个解此数学模型的算法，最后编出程序，进行测试、调整直至得到最终解答。寻求数学模型的实质是分析问题，从中提取操作的对象，并找出这些操作对象之间含有的关系，然后用数学的语言加以描述。例如，求解梁架结构中应力的数学模型为线性方程组；预报人口增长情况的数学模型为微分方程。然而，更多的非数值计算问题无法用数学方程加以描述。在生活中随处可见这样的例子，如图书馆数目检索系统自动化问题，计算机和人对弈问题，多叉路口交通灯的管理问题等等。在这三个例子中，我们描述问题的数学模型是称为“表”“树“和”图“的数据结构而非一个简单的数学方程。因此，简单来说，数据结构是一门研究非数值计算的程序设计问题中计算机的操作对象以及它们之间的关系和操作等的学科。\n","categories":["数据结构"],"tags":["C语言","教程","数据结构"]},{"title":"菜鸟教程C语言经典100例_01","url":"/2022/10/06/%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8BC%E8%AF%AD%E8%A8%80%E7%BB%8F%E5%85%B8100%E4%BE%8B-01/","content":"题目有 1、2、3、4 四个数字，能组成多少个互不相同且无重复数字的三位数？都是多少？\n思路可填在百位、十位、个位的数字都是 1、2、3、4，组成所有的排列后再去掉不满足条件的排列。\n程序实例#include&lt;stdio.h&gt;int main()&#123;    int i,j,k;    printf(&quot;\\n&quot;);    for(i=1;i&lt;5;i++)// 以下为三重循环    &#123;         for(j=1;j&lt;5;j++)         &#123;            for (k=1;k&lt;5;k++) // 确保i、j、k三位互不相同            &#123;                 if (i!=k&amp;&amp;i!=j&amp;&amp;j!=k)                 &#123;                     printf(&quot;%d,%d,%d\\n&quot;,i,j,k);                &#125;            &#125;        &#125;    &#125;    return 0;&#125;\n\n实例输出以上实例输出结果为：\n1,2,3\n1,2,4\n1,3,2\n1,3,4\n1,4,2\n1,4,3\n2,1,3\n2,1,4\n2,3,1\n2,3,4\n2,4,1\n2,4,3\n3,1,2\n3,1,4\n3,2,1\n3,2,4\n3,4,1\n3,4,2\n4,1,2\n4,1,3\n4,2,1\n4,2,3\n4,3,1\n4,3,2\n\n进阶如果取五个不连续的数进行以上排列，如何完成？\n思路考虑使用数组使其变为连续的数。\n程序实例#include&lt;stdio.h&gt;int main()&#123;    int NUM[5];    int a, b, c, d, e;    printf(&quot;输入要操作的五个数字\\n&quot;);    scanf(&quot;%d%d%d%d%d&quot;, &amp;NUM[0], &amp;NUM[1], &amp;NUM[2], &amp;NUM[3], &amp;NUM[4]);    for (a = 0; a &lt; 5; a++)    &#123;        for (b = 0; b &lt; 5; b++)        &#123;            for (c = 0; c &lt; 5; c++)            &#123;                for (d = 0; d &lt; 5; d++)                 &#123;                    for (e = 0; e &lt; 5; e++)                    &#123;                        if (a != b &amp;&amp; b != c &amp;&amp; c != d &amp;&amp; d != e &amp;&amp; a != c &amp;&amp; a != d &amp;&amp; a != e &amp;&amp; b != d &amp;&amp; b != e &amp;&amp; c != d &amp;&amp; c != e &amp;&amp; d != e )                        &#123;                            printf(&quot;%d %d %d %d %d\\n&quot;, NUM[a], NUM[b], NUM[c], NUM[d], NUM[e]);                        &#125;                    &#125;                &#125;            &#125;        &#125;    &#125;    return 0;&#125;\n\n进阶方向考虑采用一种方式简化if语句中去重的步骤以简化。\n","categories":["菜鸟教程C语言经典100例练习"],"tags":["C语言","练习"]},{"title":"来自云上的湍流","url":"/2022/09/07/%E6%9D%A5%E8%87%AA%E4%BA%91%E4%B8%8A%E7%9A%84%E6%B9%8D%E6%B5%81/","content":"欢迎来到本blog，很高兴在此与大家相识！\n","categories":["杂项"],"tags":["杂项"]},{"title":"菜鸟教程C语言经典100例_02","url":"/2022/10/07/%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8BC%E8%AF%AD%E8%A8%80%E7%BB%8F%E5%85%B8100%E4%BE%8B_02/","content":"题目企业发放的奖金根据利润提成。利润(I)低于或等于10万元时，奖金可提10%；利润高于10万元，低于20万元时，低于10万元的部分按10%提成，高于10万元的部分，可提成7.5%；20万到40万之间时，高于20万元的部分，可提成5%；40万到60万之间时高于40万元的部分，可提成3%；60万到100万之间时，高于60万元的部分，可提成1.5%；高于100万元时，超过100万元的部分按1%提成。从键盘输入当月利润I，求应发放奖金总数？\n思路通过判定利润i的大小对其进行分段计算。\n程序实例#include&lt;stdio.h&gt;int main()&#123;    double i,j;    double i_1, i_2, i_3, i_4, i_5;    printf(&quot;请输入利润\\n&quot;);    scanf_s(&quot;%d&quot;, &amp;i);    i_1 = 100000 * 0.10;    i_2 = i_1 + 100000 * 0.075;    i_3 = i_1 + i_2 + 200000 * 0.05;    i_4 = i_1 + i_2 + i_3 + 200000 * 0.03;    i_5 = i_1 + i_2 + i_3 + i_4 + 400000 * 0.01;    if (i &lt;= 100000)     &#123;        j = i * 0.10;    &#125;    else if (i&lt;=200000)    &#123;        j = i_1 + (i - 100000) * 0.075;    &#125;    else if (i &lt;= 400000)    &#123;        j = i_2 + (i - 200000) * 0.05;    &#125;    else if (i &lt;= 600000)    &#123;        j = i_3 + (i - 400000) * 0.03;    &#125;    else if (i &lt;= 1000000)    &#123;        j = i_4 + (i - 600000) * 0.015;    &#125;    else if (i &gt; 1000000)    &#123;        j = i_5 + (i - 1000000) * 0.01;    &#125;    printf(&quot;提成为：%lf&quot;, j);    return 0;&#125;\n\n进阶方向简化程序。\n","categories":["菜鸟教程C语言经典100例练习"],"tags":["C语言","练习"]},{"title":"蓝桥杯_基础练习_Fibonacci数列","url":"/2022/10/09/%E8%93%9D%E6%A1%A5%E6%9D%AF-%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0-Fibonacci%E6%95%B0%E5%88%97/","content":"问题资源限制内存限制：256.0MB   C&#x2F;C++时间限制：1.0s   Java时间限制：3.0s   Python时间限制：5.0s问题描述Fibonacci数列的递推公式为：Fn&#x3D;Fn-1+Fn-2，其中F1&#x3D;F2&#x3D;1。\n当n比较大时，Fn也非常大，现在我们想知道，Fn除以10007的余数是多少。\n输入格式输入包含一个整数n。输出格式输出一行，包含一个整数，表示Fn除以10007的余数。说明：在本题中，答案是要求Fn除以10007的余数，因此我们只要能算出这个余数即可，而不需要先计算出Fn的准确值，再将计算的结果除以10007取余数，直接计算余数往往比先算出原数再取余简单。\n样例输入10样例输出55样例输入22样例输出7704数据规模与约定1 &lt;&#x3D; n &lt;&#x3D; 1,000,000。\n思路通过循环遍历每一个数直到求出结果。\n注意事项由于C语言中对于局部变量和全局变量分配的内存不同，在本例中使用局部变量可能会导致栈内存溢出从而报错，关于该问题你可以点击此处了解更多。同时，将取余符号放在循环中也是为了避免溢出问题。\n程序实例由于一些无法避免的原因，我将代码放到评论中。\n","categories":["蓝桥杯"],"tags":["C语言","练习"]},{"title":"蓝桥杯_基础练习_圆的面积","url":"/2022/10/09/%E8%93%9D%E6%A1%A5%E6%9D%AF-%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0-%E5%9C%86%E7%9A%84%E9%9D%A2%E7%A7%AF/","content":"问题源限制内存限制：256.0MB   C&#x2F;C++时间限制：1.0s   Java时间限制：3.0s   Python时间限制：5.0s问题描述给定圆的半径r，求圆的面积。输入格式输入包含一个整数r，表示圆的半径。输出格式输出一行，包含一个实数，四舍五入保留小数点后7位，表示圆的面积。说明：在本题中，输入是一个整数，但是输出是一个实数。\n对于实数输出的问题，请一定看清楚实数输出的要求，比如本题中要求保留小数点后7位，则你的程序必须严格的输出7位小数，输出过多或者过少的小数位数都是不行的，都会被认为错误。\n实数输出的问题如果没有特别说明，舍入都是按四舍五入进行。\n样例输入4样例输出50.2654825数据规模与约定1 &lt;&#x3D; r &lt;&#x3D; 10000。提示本题对精度要求较高，请注意π的值应该取较精确的值。你可以使用常量来表示π，比如PI&#x3D;3.14159265358979323，也可以使用数学公式来求π，比如PI&#x3D;atan(1.0)*4。\n思路简单运算，注意数据类型。\n程序实例#include&lt;stdio.h&gt;#define PI 3.14159265358979323int main()&#123;    int r;    double c;    scanf_s(&quot;%d&quot;, &amp;r);    c = (double)r * r * PI;    printf(&quot;%0.7lf\\n&quot;, c + 0.00000005);    return 0;&#125;\n","categories":["蓝桥杯"],"tags":["C语言","练习"]},{"title":"蓝桥杯_基础练习_序列求和","url":"/2022/10/09/%E8%93%9D%E6%A1%A5%E6%9D%AF-%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0-%E5%BA%8F%E5%88%97%E6%B1%82%E5%92%8C/","content":"问题资源限制内存限制：256.0MB   C&#x2F;C++时间限制：1.0s   Java时间限制：3.0s   Python时间限制：5.0s问题描述求1+2+3+…+n的值。输入格式输入包括一个整数n。输出格式输出一行，包括一个整数，表示1+2+3+…+n的值。样例输入4样例输出10样例输入100说明：有一些试题会给出多组样例输入输出以帮助你更好的做题。\n一般在提交之前所有这些样例都需要测试通过才行，但这不代表这几组样例数据都正确了你的程序就是完全正确的，潜在的错误可能仍然导致你的得分较低。\n样例输出5050数据规模与约定1 &lt;&#x3D; n &lt;&#x3D; 1,000,000,000。说明：请注意这里的数据规模。\n本题直接的想法是直接使用一个循环来累加，然而，当数据规模很大时，这种“暴力”的方法往往会导致超时。此时你需要想想其他方法。你可以试一试，如果使用1000000000作为你的程序的输入，你的程序是不是能在规定的上面规定的时限内运行出来。\n本题另一个要值得注意的地方是答案的大小不在你的语言默认的整型(int)范围内，如果使用整型来保存结果，会导致结果错误。\n如果你使用C++或C语言而且准备使用printf输出结果，则你的格式字符串应该写成%I64d以输出long long类型的整数。\n思路可以使用for循环从1累加到n，但这种方法较为笨拙，故思考采用高斯方法求数列和。\n程序实例#include&lt;stdio.h&gt;int main()&#123;    long long n, m;    scanf_s(&quot;%I64d&quot;, &amp;n);    m = (1 + n) * n / 2;    printf(&quot;%I64d\\n&quot;, m);    return 0;&#125;","categories":["蓝桥杯"],"tags":["C语言","练习"]},{"title":"蓝桥杯_基础练习_数列排序","url":"/2022/10/07/%E8%93%9D%E6%A1%A5%E6%9D%AF-%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0-%E6%95%B0%E5%88%97%E6%8E%92%E5%BA%8F/","content":"问题资源限制内存限制：512.0MB   C&#x2F;C++时间限制：1.0s   Java时间限制：3.0s   Python时间限制：5.0s问题描述　　给定一个长度为n的数列，将这个数列按从小到大的顺序排列。1&lt;&#x3D;n&lt;&#x3D;200输入格式　　第一行为一个整数n。　　第二行包含n个整数，为待排序的数，每个整数的绝对值小于10000。输出格式　　输出一行，按从小到大的顺序输出排序后的数列。样例输入58 3 6 4 9样例输出3 4 6 8 9\n思路将数列放入数组中，将其依次进行两两比较并移动，保证较小的数永远位于较大的数右边，当遍历整个数组后即可输出合规的结果。为了简化程序，考虑引入函数来执行两两比较并移动的操作，此处需要注意的是局部变量和全局变量的关系，考虑引入指针来解决此问题。\n程序实例#include&lt;stdio.h&gt;int main()&#123;    int n,m;    int a, b, c;    int NUM[200];    scanf_s(&quot;%d&quot;, &amp;n);    for (m = 0; m &lt; n; m++)    &#123;        scanf_s(&quot;%d&quot;, &amp;NUM[m]);    &#125;    for (a = 0; a &lt; n; a++)     &#123;        for (b = 0; b &lt; n; b++)        &#123;            if (a &lt; b)            &#123;                swap(&amp;NUM[a], &amp;NUM[b]);            &#125;        &#125;    &#125;    for (c = 0; c &lt; n; c++)     &#123;        printf(&quot;%d &quot;, NUM[c]);    &#125;    return 0;&#125;int swap(int* num1, int* num2)&#123;    int i;    if ( *num1 &gt; *num2 )    &#123;        i = *num2;        *num2 = *num1;        *num1 = i;    &#125;    return 0;&#125;\n\n实例输出\n进阶方向考虑简化。\n","categories":["蓝桥杯"],"tags":["C语言","练习"]},{"title":"评教教程","url":"/2022/12/14/%E8%AF%84%E6%95%99%E6%95%99%E7%A8%8B/","content":"Edge评教流程首先打开网址webvpn.wbu.edu.cn，然后不要着急输入账密，按照以下流程操作：1.右上角打开设置,点击默认浏览器：如果上述没有成功，你也可以这样操作：2.开启允许打开IE兼容模式后，我们还要点击右上角设置把IE兼容模式打开：如果你在第一步中选择了第二种方式，此时你可以：3.完成了上述步骤后就可以输入密码了，后面的步骤非常简单\n注意事项1.评教时不可以全打一样的分，也就是说最高打93分。2.直接提交后可能会发现还是显示的0分，但是再进去就会发现已经有分了。\n","categories":["教程"],"tags":["教程"]}]